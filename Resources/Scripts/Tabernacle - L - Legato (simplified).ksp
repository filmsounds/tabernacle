{Needs:

LEGATO
- Legato, just disallow RR group if two notes are played (if possible, only if the legato interval has samples)... then allow legato group instead.
- Fast legato 2, just allow it with fast legato 1 and play two legatos... any fast legato group will need to have reversed volume per the cc for fast
- use note gap to determine cc value for fast legato
- Legato speed slider

FINAL
- Group DFD vs sampler vs TS-Pro mode...?
- A way to bypass dynamic crossfading... hold x note or CC or both to hear the closest dynamic group via the last given CC1 value. To keep the sound source as pure as possible or reduce voice count if desired or during a moment of abnormally heavy load.

DONE!

Build an instrument!
Demo it!

}

    {   Array reminder:
        2D: [(XYZ)+X+Y+Z]
        3D: [X * Y * Z]
        4D: [W * X * Y * Z]
        Indexing the array:
        2D:          [yZ+z]
        3D:      [xYZ+yZ+z]
        4D: [wXYZ+xYZ+yZ+z]    }


{#####################################################################################}
{ ---- ON INIT -- ON INIT -- ON INIT -- ON INIT -- ON INIT -- ON INIT -- ON INIT ---- }
{#####################################################################################}


    on init
    {???? SHIFT PLAY to load technique into samples... what?}

        declare const $1M                  := 1000000 {DO NOT CHANGE - This would require rewriting several lines of code}
        declare const $half                := $1M/2   {same}
        declare const $100K                := 100000  {same}
        declare const $10K                 := 10000   {same}
        declare const $1K                  := 1000    {same}

    {#####################################################################################}
    { ----------------------------------- MASTER EDIT ----------------------------------- }

        { HOW TO EDIT }
        { All of these except MICS can be edited with ease }
        declare $default_volume            := 630000  {500000 = -6dB,  630000 = 0db}
        declare $CC_technique              := 3       {MIDI CC# to change techniques}
        declare $CC_dyn_range              := 9       {MIDI CC# to set instrument dynamic range (does not override locked techniques)}
        declare $CC_xfade                  := 22      {MIDI CC# to control technique crossfading}
        declare $CC_fast_legato            := 23      {MIDI CC# to control fast legato crossfading}
        declare $CC_mix                    := 24      {MIDI CC# to set the MIX number}
        declare $CC_steps                  := 25      {MIDI CC# to set the number of STEPS}
        declare $default_LP {Low Pass}     := 50000   {Range: 0-1Million}
        declare $default_HP {High Pass}    := 950000  {Range: 0-1Million}
        declare $HP_filter_slot            := 3       {Slots start from 0}
        declare $LP_filter_slot            := 4
        declare $filter_generic            := -1      {-1 = GroupFX,  1 = InsertFX,  2 = SendFX}
        declare $scale_degrees             := 24      {Used to snap-to-grid for PLAY Pitch steps - Set to 48 for microtonal if preferred}
        declare const $sMOD_numerator      := 10000   {This sets the PLAY STEPPER max 'sample offset'. Edit both here AND the s.MOD # listed in Kontakt's WAVE EDITOR)}
        declare const $humanize_range      := 16      {SAFE ... This is the max vel to add to downbeat 1, other downbeats are a % of this value}
        declare const $max_techniques      := 60+1    {Can be safely edited. Regarding CPU: Tabernacle mostly only looks through all techniques/groups on save/load.}
        declare const $Max_supported_RRs   := 128     {Can be safely edited}
        declare const $Max_Mixes           := 100     {Can be safely edited. To add space for more characters (i.e. "100" to "1000", CTRL+F "MIX_POSITION" to easily tweak}
        declare const $max_mics            := 16      {More is doable if you know KSP. Change Kontakt BUSES code to engine_par_volume, then tweak UI to fit the mics.}
        declare const $max_dynamics        := 8       {If more than 8 is desired...)
                                                      (1) CTRL + F to find where I've noted "Dynamic_groups_code". Copy a dynamic > Paste > Rename it, very simple.
                                                      (2) add dynamic group to instrument. Some group settings are important, thus... Copy > Paste > Rename}

    {#####################################################################################}
    { ------------------------------------ VARIABLES ------------------------------------ }

        { CROSSFADE }

        declare ~x
        declare ~y
        declare ~z
        declare ~loop
        declare ~shape
        declare $curve_end 
        declare ~middle
        declare $middle

        { GENERAL }

        declare $x
        declare $y
        declare $z
        declare $i
        declare $n
        declare $loop
        declare $vel
        declare $SIZE
        declare $note
        declare $note_ID
        declare $group
        declare $group_mic
        declare $group_tech
        declare $lowest_key
        declare $highest_key
        declare %temp_note_IDs        [128] := (-1)
        declare %temp_zone_IDs        [128] := (-1)
        declare %note_last_ID         [128]
        declare %note_technique       [128]
        declare %first_used_dyn_group [$max_techniques]
        declare %last_used_dyn_group  [$max_techniques]
        declare $current_dynamic_number
        declare $current_xfade_dynamic_number
        declare $last_technique
        declare $last_xfade_cc_value       := 0
        declare $last_fastslur_cc_value    := 0
        declare $sMOD_divider              := $1M/$sMOD_numerator
        declare $CC1_value                 := 100
        declare $num_of_techniques         := 0
        declare $active_technique          := 1
        declare $toggled_by                := 0
        declare $menu_mode                 := -1

        { GENERAL UI SPECIFIC }

        declare const $colors              := 347
        declare const $Page_Item_Limit     := 100
        declare const $UI_Page_Limit       := 4
        declare const $Total_UI            := $Page_Item_Limit * $UI_Page_Limit
        declare $Page                      := 1
        declare $advanced_view             := -1
        declare $first_mix                 := -1
        declare %mic_num_level   [$max_mics]
        declare %UI_Page         [$UI_Page_Limit+1]
        declare %UI_Elements     [$Total_UI+1]
        declare %hide_background [$Total_UI+1]
        declare %advanced_view   [$Total_UI+1]
        declare %ENV_Element     [7] 
        declare $used_envelope

        { PLAY / STEPPER}

        declare const $max_steps           := 64
        declare $num_of_steps              := 64
        declare $step_mic_rr_only          := -1
        declare $snap                      := 43000  {snap-to-grid tolerance}
        declare $scale_interval
                $scale_interval            := $1M/$scale_degrees 
        declare $step                      := 0
        declare $last_step                 := 0
        declare %note_step        [128]    := (-1)
        declare %note_step_vel    [128]
        declare $step_event
        declare $rls_event
        declare $rls_note
        declare $rls_velocity
        declare $sample_offset
        declare %StepInvertMem     [$max_steps]
        declare %StepScaleMem      [$max_steps]
        declare %play_menu_value   [9+1+$max_mics]
        declare %stepstorage       [((1+9+$max_mics)*$max_steps)] := (630000) {Play_Menu sets most default values, else this for mics found}
        declare %steppresets       [(1+16*$max_steps)]            := (500000)
        declare %tech_uses_filters [$max_techniques]              := (0)
        declare $vol
        declare $pan
        declare $tune
        declare $pitch
        declare $stretch
        declare $HPfilter
        declare $LPfilter
        declare %note_vol     [128]
        declare %note_vel     [128]
        declare %note_pan     [128]
        declare %note_tune    [128]
        declare %note_pitch   [128]
        declare %note_stretch [128]

        { HUMANIZE }

        declare $quarter
        declare $8th_note
        declare $humanize_adds
        declare $100_percent
        declare $75_percent
        declare $63_percent
        declare $50_percent
        declare $bias                      := 100
        declare $note_time

        { MIXER / MICS / MIX AUTOMATION }

        declare $num_of_mics  
        declare $first_mic                 := -1
        declare $last_mic                  := -1
        declare $mix_num                   := -1
        declare $x_mic                     := -1
        declare $mics_click_count          := 0
        declare $increment {to automate mixer}
        declare $level_B
        declare $level_A
        declare $mic_num
        declare $mic_in_use
        declare $mic_level
        declare $mixes
        declare %MIC_Label  [$max_mics + 1]
        declare %MIC_Slider [$max_mics + 1]
        declare %mix_saves  [1 + $max_mics * $Max_Mixes]
        declare %mic        [$max_mics + 1] := (-1)
        declare !mic_name   [$max_mics + 1]

        { ROUND ROBIN / DEALER / SHUFFLE }

        declare $round_robin
        declare $cards_in_deck
        declare $android_reset_num
        declare $card                      := 1
        declare $android_clock             := 1
        declare $cycle_mode_rr             := 1
        declare $cycle_mode_rls_rr         := 1
        declare $cycle_mode_rls_rr_XFade   := 1
        declare $rls_rr_matches_attack     := -1
        declare $rls_round_robin
        declare $xf_rls_round_robin
        declare %new_shuffle        [$Max_supported_RRs+1]
        declare %last_shuffle       [$Max_supported_RRs+1]
        declare %deck_to_play       [$Max_supported_RRs+1]
        declare %note_round_robin   [128]

        {ANDROID (pre-calculated Human RR)}
        {If added to, CTRL-F "num_elements(%android_34)" to edit multiple code snippets}

        declare %android_34         [1+170]  :=  (0, 20,18,17,16,29,11,9,34,4,12,32,1,33,6,5,14,10,22,15,13,28,24,25,3,21,19,31,2,27,26,30,7,8,23,  13,22,10,4,27,32,16,23,14,1,7,20,8,11,29,6,12,24,5,33,2,3,21,17,28,15,30,18,31,19,26,9,34,25,  33,24,12,31,4,7,14,25,6,20,9,13,34,32,27,11,1,3,29,8,18,17,28,10,2,5,26,22,30,15,19,16,23,21,  8,3,1,6,30,9,4,21,11,13,16,33,23,7,31,32,20,17,27,34,22,10,2,12,18,29,19,24,26,5,15,14,25,28,  34,17,20,4,26,16,11,28,32,33,14,8,25,9,30,7,13,10,31,23,24,12,18,1,22,27,15,3,19,29,5,6,21,2)
        declare %android_33         [1+165]  :=  (0, 8,11,31,28,1,9,29,22,33,18,10,4,14,6,5,25,12,7,30,24,16,19,20,13,17,21,32,26,2,3,23,27,15,  10,22,23,26,11,33,2,19,15,7,18,28,6,9,1,17,4,29,31,13,25,3,24,14,12,16,27,21,8,30,20,32,5,  18,19,20,21,10,15,8,3,5,29,7,26,9,33,11,12,28,30,23,14,17,31,13,6,4,25,32,16,22,2,24,27,1,  7,3,24,16,18,5,22,31,1,2,29,21,33,15,10,4,26,8,20,6,12,23,14,30,28,17,27,25,19,9,11,32,13,  29,31,13,25,7,1,19,23,11,8,2,16,15,5,18,28,21,22,24,9,4,20,6,33,26,12,32,17,30,3,27,14,10)
        declare %android_32         [1+160]  :=  (0, 10,30,32,15,12,8,18,3,22,19,17,2,1,6,28,24,25,20,26,11,27,16,29,4,9,23,31,21,14,5,13,7,  5,19,7,28,2,3,11,32,16,26,25,30,10,8,21,20,9,17,23,4,31,24,14,15,22,29,13,27,6,12,1,18,  26,12,18,21,30,32,17,7,24,23,9,5,19,3,27,20,22,25,29,15,13,4,6,28,16,14,1,31,8,2,10,11,  2,23,11,27,5,7,25,18,4,29,22,12,26,32,31,28,16,9,14,1,20,15,8,21,24,6,10,13,3,30,19,17,  29,30,17,31,12,18,9,11,15,14,16,2,23,7,13,21,24,22,6,20,10,28,3,27,4,8,19,1,32,5,26,25)
        declare %android_31         [1+155]  :=  (0, 25,4,19,5,10,21,6,27,18,31,17,13,3,26,30,8,28,24,20,15,14,23,11,1,2,16,29,7,22,12,9,  2,23,20,10,31,14,21,29,1,9,28,3,19,16,12,27,7,25,15,30,26,17,5,24,4,8,22,6,11,13,18,  4,10,15,31,9,26,14,22,25,18,7,19,20,8,13,29,24,2,30,12,16,28,3,6,5,27,11,21,17,23,1,  5,31,30,9,18,16,26,11,2,23,6,20,15,27,3,22,21,4,12,24,8,7,25,13,10,29,17,14,28,1,19,  10,9,12,18,1,8,16,17,4,25,21,15,30,29,19,11,14,5,13,3,27,6,23,28,31,22,24,26,2,20,7)
        declare %android_30         [1+150]  :=  (0, 28,26,2,29,14,22,1,3,13,23,25,16,30,12,17,18,24,20,7,19,5,10,15,11,21,9,8,4,27,6,  4,9,26,27,12,10,28,2,30,15,21,18,6,16,24,20,11,19,1,7,14,23,17,25,5,13,3,29,8,22,  29,13,9,8,16,23,4,26,6,17,5,20,22,18,11,19,25,7,28,1,12,15,24,21,14,30,2,27,3,10,  27,30,13,3,18,15,29,9,22,24,14,19,10,20,25,7,21,1,4,28,16,17,11,5,12,6,26,8,2,23,  8,6,30,2,20,17,27,13,10,11,12,7,23,19,21,1,5,28,29,4,18,24,25,14,16,22,9,3,26,15)
        declare %android_29         [1+145]  :=  (0, 26,6,2,9,28,15,17,21,10,5,14,22,19,11,7,1,24,16,3,27,13,25,4,12,20,29,18,8,23,  29,15,6,10,8,7,24,14,5,28,11,25,3,13,17,26,12,1,2,18,19,20,9,22,27,23,16,21,4,  23,7,15,5,21,17,12,19,28,8,10,20,2,14,24,29,22,26,6,16,3,27,11,25,18,4,1,13,9,  4,17,7,28,13,24,22,3,8,21,9,27,14,6,12,23,25,29,15,1,2,18,5,20,16,11,26,19,10,  9,24,17,8,19,12,25,11,21,13,2,18,15,14,22,4,20,23,7,26,6,16,28,27,1,10,29,3,5)
        declare %android_28         [1+140]  :=  (0, 1,7,17,11,28,4,8,24,16,20,15,25,19,3,2,13,12,21,10,9,5,27,18,22,26,14,6,23,  8,15,12,2,23,11,24,22,19,9,1,26,10,17,7,18,25,5,20,13,28,6,21,27,14,3,4,16,  24,8,25,1,18,2,22,27,10,13,7,14,20,12,15,5,26,28,9,19,23,4,16,6,3,17,11,21,  22,24,26,7,21,1,27,6,15,19,8,3,9,25,20,16,14,23,13,10,18,11,28,4,17,12,2,5,  7,22,14,8,13,27,6,12,9,10,24,17,5,26,18,3,16,15,19,20,21,2,23,11,4,25,1,28)
        declare %android_27         [1+135]  :=  (0, 16,19,21,18,12,13,17,15,6,1,25,27,23,2,5,7,9,24,10,11,8,3,4,20,26,14,22,  7,10,8,24,27,23,9,5,13,16,26,22,4,19,12,17,6,20,1,25,15,21,18,11,14,2,3,  17,1,15,20,22,4,6,12,23,7,14,3,18,10,27,9,13,11,16,26,5,8,24,25,2,19,21,  9,16,5,11,3,18,13,27,4,17,2,21,24,1,22,6,23,25,7,14,12,15,20,26,19,10,8,  6,7,12,25,21,24,23,22,18,9,19,8,20,16,3,13,4,26,17,2,27,5,11,14,10,1,15)
        declare %android_26         [1+130]  :=  (0, 15,5,4,25,12,24,21,20,8,26,14,6,18,7,9,10,2,17,3,16,19,13,22,23,1,11,  9,12,25,1,6,23,3,16,20,11,21,24,17,19,8,26,5,2,4,10,7,18,13,22,15,14,  8,6,1,15,24,22,4,10,16,14,19,23,2,3,20,11,12,5,25,26,17,21,18,13,9,7,  20,24,15,9,23,13,25,26,10,7,3,22,5,4,16,14,6,12,21,11,1,2,17,18,8,19,  16,23,9,8,22,18,1,11,26,19,4,13,12,25,10,7,24,6,15,14,21,5,2,17,20,3)
        declare %android_25         [1+125]  :=  (0, 12,6,7,11,1,10,2,9,17,5,19,3,14,15,8,23,20,25,4,16,24,13,22,21,18,  25,5,6,19,12,1,8,17,20,4,10,2,15,7,9,22,16,18,11,23,21,14,13,24,3,  2,19,5,4,14,12,15,20,16,10,11,6,8,9,17,18,23,25,1,22,24,7,3,21,13,  6,12,1,11,2,3,10,16,23,7,19,5,9,17,20,14,22,18,4,13,21,25,15,24,8,  5,3,12,19,6,2,7,23,22,18,4,1,17,20,16,15,13,25,11,14,24,9,8,21,10)
        declare %android_24         [1+120]  :=  (0, 24,10,12,17,20,23,8,6,21,16,4,18,22,5,11,9,2,1,7,19,14,3,15,13,  18,16,13,22,19,15,6,23,14,9,17,1,12,20,4,21,10,24,8,7,5,2,11,3,  5,22,3,10,7,11,23,15,1,21,2,24,18,19,17,14,16,13,6,8,20,9,4,12,  21,12,24,16,8,4,15,11,20,14,10,13,1,7,2,5,9,3,23,22,19,6,17,18,  8,14,13,9,6,17,11,4,19,5,16,3,24,18,10,20,22,12,15,23,7,21,2,1)
        declare %android_23         [1+115]  :=  (0, 18,6,5,19,14,13,8,21,11,16,15,1,17,7,3,2,9,22,10,4,23,12,20,  22,17,1,10,18,9,21,23,15,2,3,12,7,14,5,6,11,13,16,19,20,8,4,  7,9,18,16,22,13,23,20,14,6,5,3,11,4,1,17,15,8,19,10,12,21,2,  8,11,22,2,7,14,20,4,5,17,1,10,13,15,18,9,3,21,6,16,19,23,12,  15,21,7,6,8,3,4,19,1,9,18,14,2,12,22,11,5,23,17,13,10,20,16)
        declare %android_22         [1+110]  :=  (0, 13,20,2,18,11,15,17,12,3,8,22,19,9,7,16,6,21,10,4,5,1,14,  9,5,20,10,22,16,21,19,2,12,14,4,3,17,6,15,1,8,18,11,13,7,  3,11,5,8,14,6,1,4,20,19,7,18,2,21,15,16,13,12,10,22,9,17,  2,22,11,12,7,15,13,18,5,4,17,10,20,1,16,6,9,19,8,14,3,21,  20,14,22,19,17,16,9,10,11,18,21,8,5,13,6,15,3,4,12,7,2,1)
        declare %android_21         [1+105]  :=  (0, 7,14,11,15,4,13,21,2,16,9,8,1,19,12,18,3,10,17,20,6,5,  21,12,8,18,15,19,5,14,3,16,2,7,20,1,17,11,9,10,6,13,4,  5,1,2,17,18,20,4,12,11,3,14,21,6,7,15,8,16,9,13,19,10,  4,7,14,10,17,6,15,1,8,11,12,5,13,21,9,2,3,16,19,20,18,  15,21,12,9,10,13,18,7,2,17,1,4,19,5,16,14,11,3,20,6,8)
        declare %android_20         [1+100]  :=  (0, 15,14,16,7,13,9,1,11,2,17,5,8,6,19,3,18,12,4,10,20,  3,6,20,1,2,14,15,5,19,12,13,11,9,10,18,4,8,17,16,7,  18,12,4,15,9,19,3,13,10,8,6,5,14,17,20,16,11,7,2,1,  14,16,7,3,20,10,18,2,17,11,9,13,19,15,4,6,5,1,8,12,  4,2,7,18,19,17,20,9,12,5,14,6,10,8,3,16,13,15,11,1)
        declare %android_19         [1+95]   :=  (0, 3,17,19,12,16,9,13,2,14,4,8,10,5,7,1,11,6,15,18,  13,6,18,10,11,14,5,15,3,12,2,4,16,19,17,8,9,7,1,  5,9,1,4,8,3,16,6,19,10,17,12,11,18,15,2,14,13,7,  16,14,7,12,2,19,11,9,18,15,6,10,8,1,4,17,3,5,13,  11,3,13,10,17,18,8,14,1,12,5,4,2,15,7,6,19,16,9)
        declare %android_18         [1+90]   :=  (0, 7,9,8,18,10,4,6,2,3,17,14,16,11,1,5,15,13,12,  6,16,2,12,11,18,4,9,8,14,1,15,13,7,10,5,17,3,  4,15,13,16,14,12,18,3,2,1,7,5,17,6,11,10,9,8,  18,2,3,15,17,16,12,8,9,7,6,10,5,4,14,11,1,13,  12,9,8,5,7,15,16,2,3,6,4,11,17,18,1,14,13,10)
        declare %android_17         [1+85]   :=  (0, 4,17,16,11,15,1,6,10,2,3,8,13,7,5,12,9,14,  11,14,9,8,12,4,1,3,17,16,10,7,6,15,13,2,5,  8,5,2,10,13,11,4,16,14,9,3,6,1,12,7,17,15,  10,15,17,3,7,8,11,9,5,2,16,1,4,13,6,14,12,  3,12,14,16,6,10,8,2,15,17,9,4,11,7,1,5,13)
        declare %android_16         [1+80]   :=  (0, 4,1,13,15,10,12,14,9,2,16,6,7,5,11,8,3,  15,4,2,8,16,7,11,3,1,13,12,14,10,6,9,5,  8,15,5,9,13,1,6,14,4,3,7,11,16,12,2,10,  9,8,3,2,5,11,12,4,15,10,14,6,13,7,1,16,  13,9,12,1,10,6,7,15,8,16,11,3,5,14,4,2)
        declare %android_15         [1+75]   :=  (0, 3,11,5,13,10,12,15,6,7,4,1,14,2,9,8,  5,1,10,2,4,8,14,12,15,13,3,6,11,7,9,  10,3,4,11,13,6,9,8,14,2,5,12,1,15,7,  4,5,13,1,2,12,7,6,9,11,10,8,3,14,15,  13,10,2,3,11,8,15,12,7,1,4,6,5,9,14)
        declare %android_14         [1+70]   :=  (0, 13,12,2,11,10,9,3,6,14,4,1,8,7,5,  12,3,14,1,4,7,2,9,5,11,13,6,8,10,  8,6,3,13,11,5,7,14,10,1,12,9,2,4,  6,7,2,12,1,10,3,5,4,13,8,14,9,11,  9,3,10,8,13,4,2,7,11,12,6,5,14,1)
        declare %android_13         [1+65]   :=  (0, 4,12,2,6,9,10,13,3,1,8,5,7,11,  6,7,12,10,1,8,11,2,4,3,9,13,5,  10,13,7,8,4,3,5,12,6,2,1,11,9,  8,11,13,3,6,2,9,7,10,12,4,5,1,  3,5,11,2,10,12,1,13,8,7,4,9,6)
        declare %android_12         [1+60]   :=  (0, 12,8,1,5,9,2,6,7,10,4,3,11,  2,12,3,9,11,4,1,8,6,5,10,7,  11,10,1,3,7,5,4,12,2,9,6,8,  1,6,3,7,8,9,5,10,4,11,2,12,  10,2,1,8,12,11,9,6,5,7,4,3)
        declare %android_11         [1+55]   :=  (0, 2,8,5,9,4,11,10,3,7,1,6,  7,3,4,6,9,8,1,5,11,2,10,  3,5,9,11,6,10,2,4,7,8,1,  5,4,6,7,2,1,8,9,10,3,11,  4,9,11,10,7,2,3,6,1,5,8)
        declare %android_10         [1+60]   :=  (0, 8,10,7,1,3,9,2,5,6,4,  5,4,2,8,7,6,10,3,9,1,  9,1,10,5,2,3,4,7,8,6,  7,8,4,3,10,6,1,2,9,5,  2,5,1,7,4,9,8,10,6,3     ,3,8,4,7,1,5,9,6,10,2)
        declare %android_9          [1+54]   :=  (0, 5,9,7,6,4,8,1,2,3,  4,3,1,8,6,2,5,9,7,  6,7,5,2,8,9,4,3,1,  8,1,4,9,2,3,6,7,5,  2,5,6,3,9,7,8,1,4,  9,4,8,7,3,1,2,5,6)
        declare %android_8          [1+56]   :=  (0, 4,1,7,2,6,3,8,5,  2,4,8,1,3,7,5,6,  1,2,5,4,7,8,6,3,  7,1,6,2,3,5,8,4,  3,5,2,6,4,1,7,8,  6,2,7,4,1,3,8,5,  8,1,5,2,3,7,4,6)
        declare %android_7          [1+49]   :=  (0, 3,5,7,6,1,2,4,  7,1,4,2,3,5,6,  4,3,6,5,7,1,2,  6,7,2,1,4,3,5,  2,4,5,3,6,7,1,  5,6,1,7,2,4,3,  1,2,3,4,5,6,7)
        declare %android_6          [1+48]   :=  (0, 6,3,5,2,4,1,  3,5,4,6,1,2,  4,6,1,2,3,5,  4,1,6,3,2,5,  1,3,2,5,6,4,  5,2,3,4,1,6,  2,3,5,1,4,6,  2,5,4,6,1,3)
        declare %android_5          [1+45]   :=  (0, 2,3,5,1,4,  3,5,4,2,1,  5,4,1,3,2,  4,1,2,5,3,  1,2,3,4,5,  2,3,5,1,4,  3,5,4,2,1,  5,4,1,3,2,  4,1,2,5,3)
        declare %android_4          [1+44]   :=  (0, 1,2,3,4,  2,3,1,4,  3,4,2,1,  4,1,3,2,  1,4,2,3,  4,3,2,1,  3,1,2,4,  2,1,3,4,  1,3,2,4,  3,2,1,4,  1,2,4,3)
        declare %android_3          [1+18]   :=  (0, 1,2,3,  2,3,1,  3,1,2,  3,2,1,  2,1,3,  1,3,2)

        declare %tech_android_num   [num_elements(%android_34) * $max_techniques]
        declare %android_matrix     [num_elements(%android_34) * 35]

        {Percussion mode specific RR}

        declare const $key_offset         := 36-1
        declare %perc_android_clock [128] := (1)
        declare %perc_cycle_mode_rr [128] := (1)
        declare %perc_note_rr       [128]
        declare %android_reset_num  [$max_techniques] := (0)

        {The same thing in one array...  redundant now,  much easier later}
        $x := 0
        while ($x < num_elements(%android_34) + 1)
            %android_matrix[(3  * num_elements(%android_34)) + $x]  :=  %android_3 [$x]
            %android_matrix[(4  * num_elements(%android_34)) + $x]  :=  %android_4 [$x]
            %android_matrix[(5  * num_elements(%android_34)) + $x]  :=  %android_5 [$x]
            %android_matrix[(6  * num_elements(%android_34)) + $x]  :=  %android_6 [$x]
            %android_matrix[(7  * num_elements(%android_34)) + $x]  :=  %android_7 [$x]
            %android_matrix[(8  * num_elements(%android_34)) + $x]  :=  %android_8 [$x]
            %android_matrix[(9  * num_elements(%android_34)) + $x]  :=  %android_9 [$x]
            %android_matrix[(10 * num_elements(%android_34)) + $x]  :=  %android_10[$x]
            %android_matrix[(11 * num_elements(%android_34)) + $x]  :=  %android_11[$x]
            %android_matrix[(12 * num_elements(%android_34)) + $x]  :=  %android_12[$x]
            %android_matrix[(13 * num_elements(%android_34)) + $x]  :=  %android_13[$x]
            %android_matrix[(14 * num_elements(%android_34)) + $x]  :=  %android_14[$x]
            %android_matrix[(15 * num_elements(%android_34)) + $x]  :=  %android_15[$x]
            %android_matrix[(16 * num_elements(%android_34)) + $x]  :=  %android_16[$x]
            %android_matrix[(17 * num_elements(%android_34)) + $x]  :=  %android_17[$x]
            %android_matrix[(18 * num_elements(%android_34)) + $x]  :=  %android_18[$x]
            %android_matrix[(19 * num_elements(%android_34)) + $x]  :=  %android_19[$x]
            %android_matrix[(20 * num_elements(%android_34)) + $x]  :=  %android_20[$x]
            %android_matrix[(21 * num_elements(%android_34)) + $x]  :=  %android_21[$x]
            %android_matrix[(22 * num_elements(%android_34)) + $x]  :=  %android_22[$x]
            %android_matrix[(23 * num_elements(%android_34)) + $x]  :=  %android_23[$x]
            %android_matrix[(24 * num_elements(%android_34)) + $x]  :=  %android_24[$x]
            %android_matrix[(25 * num_elements(%android_34)) + $x]  :=  %android_25[$x]
            %android_matrix[(26 * num_elements(%android_34)) + $x]  :=  %android_26[$x]
            %android_matrix[(27 * num_elements(%android_34)) + $x]  :=  %android_27[$x]
            %android_matrix[(28 * num_elements(%android_34)) + $x]  :=  %android_28[$x]
            %android_matrix[(29 * num_elements(%android_34)) + $x]  :=  %android_29[$x]
            %android_matrix[(30 * num_elements(%android_34)) + $x]  :=  %android_30[$x]
            %android_matrix[(31 * num_elements(%android_34)) + $x]  :=  %android_31[$x]
            %android_matrix[(32 * num_elements(%android_34)) + $x]  :=  %android_32[$x]
            %android_matrix[(33 * num_elements(%android_34)) + $x]  :=  %android_33[$x]
            %android_matrix[(34 * num_elements(%android_34)) + $x]  :=  %android_34[$x]
            inc($x)
        end while

        {loop for android matrix}
        declare %android_array_size [35] := (0)
            %android_array_size[3]  := num_elements(%android_3 )
            %android_array_size[4]  := num_elements(%android_4 )
            %android_array_size[5]  := num_elements(%android_5 )
            %android_array_size[6]  := num_elements(%android_6 )
            %android_array_size[7]  := num_elements(%android_7 )
            %android_array_size[8]  := num_elements(%android_8 )
            %android_array_size[9]  := num_elements(%android_9 )
            %android_array_size[10] := num_elements(%android_10)
            %android_array_size[11] := num_elements(%android_11)
            %android_array_size[12] := num_elements(%android_12)
            %android_array_size[13] := num_elements(%android_13)
            %android_array_size[14] := num_elements(%android_14)
            %android_array_size[15] := num_elements(%android_15)
            %android_array_size[16] := num_elements(%android_16)
            %android_array_size[17] := num_elements(%android_17)
            %android_array_size[18] := num_elements(%android_18)
            %android_array_size[19] := num_elements(%android_19)
            %android_array_size[20] := num_elements(%android_20)
            %android_array_size[21] := num_elements(%android_21)
            %android_array_size[22] := num_elements(%android_22)
            %android_array_size[23] := num_elements(%android_23)
            %android_array_size[24] := num_elements(%android_24)
            %android_array_size[25] := num_elements(%android_25)
            %android_array_size[26] := num_elements(%android_26)
            %android_array_size[27] := num_elements(%android_27)
            %android_array_size[28] := num_elements(%android_28)
            %android_array_size[29] := num_elements(%android_29)
            %android_array_size[30] := num_elements(%android_30)
            %android_array_size[31] := num_elements(%android_31)
            %android_array_size[32] := num_elements(%android_32)
            %android_array_size[33] := num_elements(%android_33)
            %android_array_size[34] := num_elements(%android_34)

        { KONTAKT GROUPS - IDENTIFICATION }

        { Dynamic Groups / Loops }          {Dynamic_groups_code <-- don't remove this note, CTRL+F the term to see why}
            declare %tech_uses_dyn_group    [$max_techniques * $max_dynamics] {True 1, False 0}
            declare %tech_num_dyn_groups    [$max_techniques * $max_dynamics] {Tally of EMPTY groups}
            declare %tech_used_dynamics     [$max_techniques * $max_dynamics] {Tally of USED groups}
            declare %tech_dyn_group_index   [$max_techniques * $max_dynamics] {dyn 1 = group #, dyn 2 = group #, etc (to ID which group to XFADE)}
            declare %technique_ppp          [$max_techniques] := (0)
            declare %technique_pp           [$max_techniques] := (0)
            declare %technique_p            [$max_techniques] := (0)
            declare %technique_mp           [$max_techniques] := (0)
            declare %technique_mf           [$max_techniques] := (0)
            declare %technique_f            [$max_techniques] := (0)
            declare %technique_ff           [$max_techniques] := (0)
            declare %technique_fff          [$max_techniques] := (0)
        { CROSSFADE PATTERNS }
            declare %XF_1        [128]
            declare %XF_2        [128]
            declare %XF_3        [128]
            declare %XF_4        [128]
            declare %XF_5        [128]
            declare %XF_6        [128]
            declare %XF_7        [128]
            declare %XF_8        [128]
            declare %XF_binary   [128]
        { Text, Dynamics }          {Dynamic_groups_code <-- don't remove this note, CTRL+F the term to see why}
            declare !ppp_search_term        [$max_techniques]
            declare !pp_search_term         [$max_techniques]
            declare !p_search_term          [$max_techniques]
            declare !mp_search_term         [$max_techniques]
            declare !mf_search_term         [$max_techniques]
            declare !f_search_term          [$max_techniques]
            declare !ff_search_term         [$max_techniques]
            declare !fff_search_term        [$max_techniques]
        { KONTAKT GROUPS - PLAYBACK MODE }
            declare %technique              [$max_techniques]
            declare %rr_mode                [$max_techniques] := (1)
            declare %copy_cc1_mode          [$max_techniques] := (2)
            declare %uses_modwheel          [$max_techniques] := (0)
            declare %uses_dynamic_groups    [$max_techniques] := (0)
            declare %dynamic_range          [$max_techniques] := (0)
            declare %dynamic_range_unique   [$max_techniques] := (0)
        { RR & Release Groups }
            declare %technique_rr1_group    [$max_techniques] := (0)
            declare %technique_rr_groups    [$max_techniques] := (0)
            declare %technique_rls1_group   [$max_techniques] := (0)
            declare %technique_rls_groups   [$max_techniques] := (0)
            declare %rr_samples_found       [$max_techniques]
            declare %rls_samples_found      [$max_techniques]
            declare %use_tech_xfade         [$max_techniques]
            declare %use_rr                 [$max_techniques]
            declare %use_rls                [$max_techniques]
        { Legato }
            declare %technique_up1_group    [$max_techniques] := (0)
            declare %technique_up_groups    [$max_techniques] := (0)
            declare %technique_dn1_group    [$max_techniques] := (0)
            declare %technique_dn_groups    [$max_techniques] := (0)
            declare %up_samples_found       [$max_techniques]
            declare %dn_samples_found       [$max_techniques]
            declare %slur_slow              [$max_techniques]
            declare %slur_moderate          [$max_techniques]
            declare %slur_fast              [$max_techniques]
            declare %slur_fast2             [$max_techniques]
        { Text }
            declare !technique_name         [$max_techniques]
            declare !tech_search_term       [$max_techniques]
            declare !mic_search_term        [$max_techniques]
            declare !rr1_search_term        [$max_techniques]
            declare !rls1_search_term       [$max_techniques]
            declare !up1_search_term        [$max_techniques]
            declare !dn1_search_term        [$max_techniques]

    {#####################################################################################}
    { --------------------------------- DEFAULT VALUES ---------------------------------- }

        { Technique & Dynamic group naming scheme to identify Kontakt groups }

        $x := 1
        while ($x < $max_techniques) {Dynamic_groups_code <-- don't remove this note, CTRL+F the term to see why}
            !tech_search_term[$x] := "---------- TECHNIQUE " & $x & " ----------"
            !mic_search_term[$x]  := "############## MIC " & $x & " ##############"
            !ppp_search_term[$x]  := "      T" & $x & "-PPP"
            !pp_search_term[$x]   := "      T" & $x & "-PP"
            !p_search_term[$x]    := "      T" & $x & "-P"
            !mp_search_term[$x]   := "      T" & $x & "-MP"
            !mf_search_term[$x]   := "      T" & $x & "-MF"
            !f_search_term[$x]    := "      T" & $x & "-F"
            !ff_search_term[$x]   := "      T" & $x & "-FF"
            !fff_search_term[$x]  := "      T" & $x & "-FFF"
            !rr1_search_term[$x]  := "T" & $x & "      rr1"
            !rls1_search_term[$x] := "T" & $x & "      rls1"
            !up1_search_term[$x]  := "T" & $x & "      up1"
            !dn1_search_term[$x]  := "T" & $x & "      dn1"
            inc($x)
        end while

        { Mic Names for searching and identifying }

            $x := 1
            while ($x < $max_mics + 1)
                !mic_name[$x]   := "Mic " & $x
                inc($x)
            end while

        { Sets all groups to "use" same technique (for RR, RLS, Legato) before a user override }

            $x := 1
            while ($x < $max_techniques)
                %use_rr        [$x] := $x
                %use_rls       [$x] := $x
                %slur_slow     [$x] := $x
                %slur_moderate [$x] := $x
                %slur_fast     [$x] := $x
                %slur_fast2    [$x] := $x
                inc($x)
            end while

        {Default volume for all mixer presets}

        $x := 0
        while ($x < num_elements(%mix_saves) + 1)
            %mix_saves[$x] := $default_volume
            inc($x)
        end while

        {Round Robin: Set default count in numerical order (1, 2, 3...) for initial "Human mode" shuffle}

        $x := 1
        while($x < $Max_supported_RRs+1)
            %new_shuffle [$x] := $x
            %last_shuffle[$x] := $x
            %deck_to_play[$x] := $x
            inc($x)
        end while

    {#####################################################################################}
    { ----------------------------------- DECLARE UI ------------------------------------ }

        declare ui_button $Page_Main
        declare ui_button $Page_Play
        declare ui_button $Page_Waveform
        declare ui_button $Page_Behavior
            set_text($Page_Main,"Main")
            set_text($Page_Play,"Play")
            set_text($Page_Waveform,"Waveform")
            set_text($Page_Behavior,"Behavior")
            %UI_Page[1] := get_ui_id($Page_Main)
            %UI_Page[2] := get_ui_id($Page_Play)
            %UI_Page[3] := get_ui_id($Page_Waveform)
            %UI_Page[4] := get_ui_id($Page_Behavior)


        declare ui_button $save_preset
        declare ui_button $draw_mode
        declare ui_button $read_step_velocity
        declare ui_button $percussion_mode
        declare ui_button $uses_filters
        declare ui_button $stretch_mode
            $stretch_mode := 1
            $read_step_velocity := 0
            set_control_par_str(get_ui_id($save_preset),       $CONTROL_PAR_TEXT,"S")
            set_control_par_str(get_ui_id($draw_mode),         $CONTROL_PAR_TEXT,"D")
            set_control_par_str(get_ui_id($read_step_velocity),$CONTROL_PAR_TEXT,"V")
            set_control_par_str(get_ui_id($percussion_mode),   $CONTROL_PAR_TEXT,"Percussion")
            set_control_par_str(get_ui_id($uses_filters),      $CONTROL_PAR_TEXT,"Uses Filters")
            set_control_par_str(get_ui_id($stretch_mode),      $CONTROL_PAR_TEXT,"Stretch Mode")

        declare ui_menu $technique_menu
        declare ui_menu $rr_menu
        declare ui_menu $rls_menu
        declare ui_menu $slur_slow_menu
        declare ui_menu $slur_moderate_menu
        declare ui_menu $slur_fast_menu
        declare ui_menu $slur_fast2_menu
        declare ui_menu $xf_menu
            add_menu_item ($rr_menu                  ,"" , 0)
            add_menu_item ($rls_menu                 ,"" , 0)
            add_menu_item ($slur_slow_menu           ,"" , 0)
            add_menu_item ($slur_moderate_menu       ,"" , 0)
            add_menu_item ($slur_fast_menu           ,"" , 0)
            add_menu_item ($slur_fast2_menu          ,"" , 0)
            add_menu_item ($xf_menu                  ,"" , 0)

            $x := 1
            while ($x < $max_techniques)
                add_menu_item ($technique_menu       ,"", $x)
                add_menu_item ($rr_menu              ,"", $x)
                add_menu_item ($rls_menu             ,"", $x)
                add_menu_item ($slur_slow_menu       ,"", $x)
                add_menu_item ($slur_moderate_menu   ,"", $x)
                add_menu_item ($slur_fast_menu       ,"", $x)
                add_menu_item ($slur_fast2_menu      ,"", $x)
                add_menu_item ($xf_menu              ,"", $x)
                inc($x)
            end while

        declare ui_menu $play_menu
            add_menu_item ($play_menu, "Volume"       , 1)
            add_menu_item ($play_menu, "Velocity"     , 2)
            add_menu_item ($play_menu, "Pan"          , 3)
            add_menu_item ($play_menu, "Intonation"   , 4)
            add_menu_item ($play_menu, "Pitch"        , 5)
            add_menu_item ($play_menu, "Sample Start" , 6)
            add_menu_item ($play_menu, "Stretch *"    , 7)
            add_menu_item ($play_menu, "HP Filter *"  , 8)
            add_menu_item ($play_menu, "LP Filter *"  , 9)
            $play_menu := 1
        declare $init_play_menu_items
            $x := 1
            $init_play_menu_items := get_control_par(get_ui_id($play_menu),$CONTROL_PAR_NUM_ITEMS)
            while ($x < $max_mics + 1)
                add_menu_item ($play_menu, "", $x+$init_play_menu_items)
                inc($x)
            end while

        { Set default values for %stepstorage }

        $x := 0
        while ($x < $max_steps)
            %stepstorage[(1 * $max_steps) + $x]  :=  $default_volume
            %stepstorage[(2 * $max_steps) + $x]  :=  $default_volume
            %stepstorage[(3 * $max_steps) + $x]  :=  $half
            %stepstorage[(4 * $max_steps) + $x]  :=  $half
            %stepstorage[(5 * $max_steps) + $x]  :=  $half
            %stepstorage[(6 * $max_steps) + $x]  :=  $half
            %stepstorage[(7 * $max_steps) + $x]  :=  $half
            %stepstorage[(8 * $max_steps) + $x]  :=  $default_LP
            %stepstorage[(9 * $max_steps) + $x]  :=  $default_HP
            inc($x) 
        end while

        {Defaults added here so if Steps is immediately set to 0... slider will match default}

            %play_menu_value[1]  :=  $default_volume
            %play_menu_value[2]  :=  $default_volume
            %play_menu_value[3]  :=  $half
            %play_menu_value[4]  :=  $half
            %play_menu_value[5]  :=  $half
            %play_menu_value[6]  :=  $half
            %play_menu_value[7]  :=  $half
            %play_menu_value[8]  :=  $default_LP
            %play_menu_value[9]  :=  $default_HP
            $x := 10
            while ($x < num_elements(%play_menu_value)+1)
                %play_menu_value[$x] := $default_volume
                inc($x)
            end while

        declare !play_preset_name[16 + 1]
            !play_preset_name[1]  := "Hedwig"     
            !play_preset_name[2]  := "Bumper Car" 
            !play_preset_name[3]  := "Glider"     
            !play_preset_name[4]  := "Arpeggio"   
            !play_preset_name[5]  := "Twins"      
            !play_preset_name[6]  := "Triplets"   
            !play_preset_name[7]  := "Twists"     
            !play_preset_name[8]  := "Grow"       
            !play_preset_name[9]  := "Shrink"     
            !play_preset_name[10] := "Curved"     
            !play_preset_name[11] := "Stairwell"  
            !play_preset_name[12] := "Chasing Duo"
            !play_preset_name[13] := "Slow <"     
            !play_preset_name[14] := "Slow >"     
            !play_preset_name[15] := "Ski Jump"   
            !play_preset_name[16] := "Tricky"     

        declare ui_menu $play_preset_menu
            add_menu_item ($play_preset_menu, !play_preset_name[1] ,  1)
            add_menu_item ($play_preset_menu, !play_preset_name[2] ,  2) {ordered chaos}
            add_menu_item ($play_preset_menu, !play_preset_name[3] ,  3)
            add_menu_item ($play_preset_menu, !play_preset_name[4] ,  4) {top, middle, bottom}
            add_menu_item ($play_preset_menu, !play_preset_name[5] ,  5)
            add_menu_item ($play_preset_menu, !play_preset_name[6] ,  6)
            add_menu_item ($play_preset_menu, !play_preset_name[7] ,  7)
            add_menu_item ($play_preset_menu, !play_preset_name[8] ,  8)
            add_menu_item ($play_preset_menu, !play_preset_name[9] ,  9)
            add_menu_item ($play_preset_menu, !play_preset_name[10], 10) {Giant Zig-zag that grows smaller}
            add_menu_item ($play_preset_menu, !play_preset_name[11], 11) {Double random}
            add_menu_item ($play_preset_menu, !play_preset_name[12], 12) 
            add_menu_item ($play_preset_menu, !play_preset_name[13], 13)
            add_menu_item ($play_preset_menu, !play_preset_name[14], 14) {Steep slope}
            add_menu_item ($play_preset_menu, !play_preset_name[15], 15) {Zig zag downward}
            add_menu_item ($play_preset_menu, !play_preset_name[16], 16) 

        declare ui_table %StepTable[$max_steps] (4, 7, $1M)

        declare ui_menu $rr_mode_menu
            add_menu_item ($rr_mode_menu, "Human",      1)
            add_menu_item ($rr_mode_menu, "Android",    2)
            add_menu_item ($rr_mode_menu, "Cycle",      3)

        declare ui_menu $ModVel_mode
            add_menu_item ($ModVel_mode, "100% vel",  1)
            add_menu_item ($ModVel_mode, "40v / 60m", 2)
            add_menu_item ($ModVel_mode, "100% mod",  3)
            $ModVel_mode    := 2

        declare ui_menu $Waveform_menu
            add_menu_item ($Waveform_menu, "Dynamics"   , 1)
            add_menu_item ($Waveform_menu, "RR Attack"  , 2)
            add_menu_item ($Waveform_menu, "Release"    , 3)
            add_menu_item ($Waveform_menu, "Legato"     , 4)

        { ------- SLIDERS ------- }


        declare ui_slider $main_volume    (0,$1M)
        declare ui_slider $legato_speed   (0,$1M)
        declare ui_slider $width          (0,$1M)
        declare ui_slider $humanize       (0,$humanize_range * $humanize_range)
        declare ui_slider $dynamic_range  (0,$1M)
        declare ui_slider $play_slider    (0,$1M)
        declare ui_slider $tech_dyn_range (0,$1M)
        declare ui_slider $xfade_curve    (96,436)

            $main_volume    := $default_volume
            $legato_speed   := $half
            $width          := $1M
            $humanize       := 500000
            $dynamic_range  := $1M
            $play_slider    := 800000
            $tech_dyn_range := $1M
            $xfade_curve    := 266

            {Default value when using CTRL + Click}
            set_control_par(get_ui_id($main_volume),    $CONTROL_PAR_DEFAULT_VALUE, $default_volume)
            set_control_par(get_ui_id($legato_speed),   $CONTROL_PAR_DEFAULT_VALUE,$half)
            set_control_par(get_ui_id($width),          $CONTROL_PAR_DEFAULT_VALUE, $1M) 
            set_control_par(get_ui_id($humanize),       $CONTROL_PAR_DEFAULT_VALUE, 500000)
            set_control_par(get_ui_id($dynamic_range),  $CONTROL_PAR_DEFAULT_VALUE,$1M)
            set_control_par(get_ui_id($tech_dyn_range), $CONTROL_PAR_DEFAULT_VALUE,$1M)
            set_control_par(get_ui_id($xfade_curve),    $CONTROL_PAR_DEFAULT_VALUE,266)

        declare ui_slider $Mic_Bus1       (0,$1M)
        declare ui_slider $Mic_Bus2       (0,$1M)
        declare ui_slider $Mic_Bus3       (0,$1M)
        declare ui_slider $Mic_Bus4       (0,$1M)
        declare ui_slider $Mic_Bus5       (0,$1M)
        declare ui_slider $Mic_Bus6       (0,$1M)
        declare ui_slider $Mic_Bus7       (0,$1M)
        declare ui_slider $Mic_Bus8       (0,$1M)
        declare ui_slider $Mic_Bus9       (0,$1M)
        declare ui_slider $Mic_Bus10      (0,$1M)
        declare ui_slider $Mic_Bus11      (0,$1M)
        declare ui_slider $Mic_Bus12      (0,$1M)
        declare ui_slider $Mic_Bus13      (0,$1M)
        declare ui_slider $Mic_Bus14      (0,$1M)
        declare ui_slider $Mic_Bus15      (0,$1M)
        declare ui_slider $Mic_Bus16      (0,$1M)
            $Mic_Bus1  := $default_volume
            $Mic_Bus2  := $default_volume
            $Mic_Bus3  := $default_volume
            $Mic_Bus4  := $default_volume
            $Mic_Bus5  := $default_volume
            $Mic_Bus6  := $default_volume
            $Mic_Bus7  := $default_volume
            $Mic_Bus8  := $default_volume
            $Mic_Bus9  := $default_volume
            $Mic_Bus10 := $default_volume
            $Mic_Bus11 := $default_volume
            $Mic_Bus12 := $default_volume
            $Mic_Bus13 := $default_volume
            $Mic_Bus14 := $default_volume
            $Mic_Bus15 := $default_volume
            $Mic_Bus16 := $default_volume
        declare ui_slider $C_env          (0,$1M)
        declare ui_slider $A_env          (0,$1M)
        declare ui_slider $H_env          (0,$1M)
        declare ui_slider $D_env          (0,$1M)
        declare ui_slider $S_env          (0,$1M)
        declare ui_slider $R_env          (0,$1M)

        declare ui_text_edit @PATCH_NAME
        declare ui_text_edit @PLAYER
        declare ui_text_edit @PERFORMANCE
        declare ui_text_edit @XF_selection
        declare ui_text_edit @Attack
        declare ui_text_edit @Release
        declare ui_text_edit @ModVel
        declare ui_text_edit @LEGATO
        declare ui_text_edit @Slow
        declare ui_text_edit @Moderate
        declare ui_text_edit @Fast
        declare ui_text_edit @Fast2
        declare ui_text_edit @PLAYBACK
        declare ui_text_edit @LOCK_DYNAMICS
        declare ui_text_edit @INSTRUMENT
        declare ui_text_edit @SignalVolume
        declare ui_text_edit @STEPS
        declare ui_text_edit @MIX
        declare ui_text_edit @ENVELOPE
        declare ui_text_edit @Theme
        declare ui_text_edit @KeyRangeTech
        declare ui_text_edit @Mic1 
        declare ui_text_edit @Mic2 
        declare ui_text_edit @Mic3 
        declare ui_text_edit @Mic4 
        declare ui_text_edit @Mic5 
        declare ui_text_edit @Mic6 
        declare ui_text_edit @Mic7 
        declare ui_text_edit @Mic8 
        declare ui_text_edit @Mic9 
        declare ui_text_edit @Mic10
        declare ui_text_edit @Mic11
        declare ui_text_edit @Mic12
        declare ui_text_edit @Mic13
        declare ui_text_edit @Mic14
        declare ui_text_edit @Mic15
        declare ui_text_edit @Mic16
            @PATCH_NAME    := "Percussion" {Currently patch name is only visible when percussion mode is enabled}
            @XF_selection  := "X-Fade w/"
            @ModVel        := "Mod to Vel"
            @Fast2         := "Fast 2"
            @SignalVolume  := "X-FADE CURVE"
            @PLAYBACK      := "PLAYBACK"
            @LOCK_DYNAMICS := "LOCK DYNAMICS"
            @KeyRangeTech  := "Key Range"
            @Mic1          := "M1"
            @Mic2          := "M2"
            @Mic3          := "M3"
            @Mic4          := "M4"
            @Mic5          := "M5"
            @Mic6          := "M6"
            @Mic7          := "M7"
            @Mic8          := "M8"
            @Mic9          := "M9"
            @Mic10         := "M10"
            @Mic11         := "M11"
            @Mic12         := "M12"
            @Mic13         := "M13"
            @Mic14         := "M14"
            @Mic15         := "M15"
            @Mic16         := "M16"

        declare ui_label $playing           ( 230, 30 )
        declare ui_label $tech_display      ( 140, 30 )
        declare ui_value_edit $KeyRangeTech (1,$max_techniques,1)
        declare ui_value_edit $MIX          (1,$Max_Mixes,1)
        declare ui_value_edit $Theme        (1,10,1)
        declare ui_value_edit $STEPS        (0,$max_steps,1)
            $STEPS := 16

    {#####################################################################################}
    { ----------------------------------- UI_ELEMENTS ----------------------------------- }

            {MAIN PAGE}
            %UI_Elements[001] := get_ui_id(@PLAYER              )
            %UI_Elements[002] := get_ui_id($main_volume         )
            %UI_Elements[003] := get_ui_id($humanize            )
            %UI_Elements[004] := get_ui_id($legato_speed        )
            %UI_Elements[005] := get_ui_id($width               )
            %UI_Elements[006] := get_ui_id($dynamic_range       )
            %UI_Elements[007] := get_ui_id($playing             )
            %UI_Elements[008] := get_ui_id($tech_display        )
            %UI_Elements[009] := get_ui_id(@Theme               )
            %UI_Elements[010] := get_ui_id($Theme               )
            %UI_Elements[011] := get_ui_id(@KeyRangeTech        )
            %UI_Elements[012] := get_ui_id($KeyRangeTech        )
            %UI_Elements[013] := get_ui_id(@MIX                 )
            %UI_Elements[014] := get_ui_id($MIX                 )
            %UI_Elements[015] := get_ui_id(@Mic1                )
            %UI_Elements[016] := get_ui_id(@Mic2                )
            %UI_Elements[017] := get_ui_id(@Mic3                )
            %UI_Elements[018] := get_ui_id(@Mic4                )
            %UI_Elements[019] := get_ui_id(@Mic5                )
            %UI_Elements[020] := get_ui_id(@Mic6                )
            %UI_Elements[021] := get_ui_id(@Mic7                )
            %UI_Elements[022] := get_ui_id(@Mic8                )
            %UI_Elements[023] := get_ui_id(@Mic9                )
            %UI_Elements[024] := get_ui_id(@Mic10               )
            %UI_Elements[025] := get_ui_id(@Mic11               )
            %UI_Elements[026] := get_ui_id(@Mic12               )
            %UI_Elements[027] := get_ui_id(@Mic13               )
            %UI_Elements[028] := get_ui_id(@Mic14               )
            %UI_Elements[029] := get_ui_id(@Mic15               )
            %UI_Elements[030] := get_ui_id(@Mic16               )
            %UI_Elements[031] := get_ui_id($Mic_Bus1            )
            %UI_Elements[032] := get_ui_id($Mic_Bus2            )
            %UI_Elements[033] := get_ui_id($Mic_Bus3            )
            %UI_Elements[034] := get_ui_id($Mic_Bus4            )
            %UI_Elements[035] := get_ui_id($Mic_Bus5            )
            %UI_Elements[036] := get_ui_id($Mic_Bus6            )
            %UI_Elements[037] := get_ui_id($Mic_Bus7            )
            %UI_Elements[038] := get_ui_id($Mic_Bus8            )
            %UI_Elements[039] := get_ui_id($Mic_Bus9            )
            %UI_Elements[040] := get_ui_id($Mic_Bus10           )
            %UI_Elements[041] := get_ui_id($Mic_Bus11           )
            %UI_Elements[042] := get_ui_id($Mic_Bus12           )
            %UI_Elements[043] := get_ui_id($Mic_Bus13           )
            %UI_Elements[044] := get_ui_id($Mic_Bus14           )
            %UI_Elements[045] := get_ui_id($Mic_Bus15           )
            %UI_Elements[046] := get_ui_id($Mic_Bus16           )
            %UI_Elements[047] := get_ui_id(@PATCH_NAME          )

            {PLAY PAGE}
            %UI_Elements[101] := get_ui_id($play_menu           )
            %UI_Elements[102] := get_ui_id($read_step_velocity  )
            %UI_Elements[103] := get_ui_id(@STEPS               )
            %UI_Elements[104] := get_ui_id($STEPS               )
            %UI_Elements[105] := get_ui_id($play_preset_menu    )
            %UI_Elements[106] := get_ui_id($save_preset         )
            %UI_Elements[107] := get_ui_id($play_slider         )
            %UI_Elements[108] := get_ui_id($draw_mode           )
            %UI_Elements[109] := get_ui_id(%StepTable           )

            {WAVEFORM PAGE}
            %UI_Elements[201] := get_ui_id($technique_menu      )
            %UI_Elements[202] := get_ui_id($Waveform_menu       )

            %UI_Elements[203] := get_ui_id(@SignalVolume        )
            %UI_Elements[204] := get_ui_id($xfade_curve         )

            %UI_Elements[206] := get_ui_id(@ENVELOPE            )
            %UI_Elements[207] := get_ui_id($C_env               )
            %UI_Elements[208] := get_ui_id($A_env               )
            %UI_Elements[209] := get_ui_id($H_env               )
            %UI_Elements[210] := get_ui_id($D_env               )
            %UI_Elements[211] := get_ui_id($S_env               )
            %UI_Elements[212] := get_ui_id($R_env               )


            {BEHAVIOR PAGE}
            %UI_Elements[300] := get_ui_id($technique_menu      )

            %UI_Elements[301] := get_ui_id(@PERFORMANCE         )
            %UI_Elements[302] := get_ui_id(@XF_selection        )
            %UI_Elements[303] := get_ui_id(@Attack              )
            %UI_Elements[304] := get_ui_id(@Release             )
            %UI_Elements[305] := get_ui_id(@ModVel              )

            %UI_Elements[306] := get_ui_id($xf_menu             )
            %UI_Elements[307] := get_ui_id($rr_menu             )
            %UI_Elements[308] := get_ui_id($rls_menu            )
            %UI_Elements[309] := get_ui_id($ModVel_mode         )

            %UI_Elements[310] := get_ui_id(@PLAYBACK            )
            %UI_Elements[311] := get_ui_id($rr_mode_menu        )
            %UI_Elements[312] := get_ui_id($stretch_mode        )

            %UI_Elements[313] := get_ui_id(@INSTRUMENT          )
            %UI_Elements[314] := get_ui_id($percussion_mode     )
            %UI_Elements[315] := get_ui_id($uses_filters        )

            %UI_Elements[316] := get_ui_id(@LEGATO              )
            %UI_Elements[317] := get_ui_id(@Slow                )
            %UI_Elements[318] := get_ui_id(@Moderate            )
            %UI_Elements[319] := get_ui_id(@Fast                )
            %UI_Elements[320] := get_ui_id(@Fast2               )
            %UI_Elements[321] := get_ui_id($slur_slow_menu      )
            %UI_Elements[322] := get_ui_id($slur_moderate_menu  )
            %UI_Elements[323] := get_ui_id($slur_fast_menu      )
            %UI_Elements[324] := get_ui_id($slur_fast2_menu     )

            %UI_Elements[325] := get_ui_id(@LOCK_DYNAMICS       )
            %UI_Elements[326] := get_ui_id($tech_dyn_range      )


            { ----------------------------------------------------- }

            {VALUE & DISPLAY EDITS}
            %hide_background[007] := get_ui_id($playing         ) {values must match UI_Elements array}
            %hide_background[008] := get_ui_id($tech_display    )
            %hide_background[009] := get_ui_id(@Theme           )
            %hide_background[010] := get_ui_id($Theme           )
            %hide_background[011] := get_ui_id(@KeyRangeTech    )
            %hide_background[012] := get_ui_id($KeyRangeTech    )
            %hide_background[103] := get_ui_id(@STEPS           )
            %hide_background[104] := get_ui_id($STEPS           )
            %hide_background[013] := get_ui_id(@MIX             )
            %hide_background[014] := get_ui_id($MIX             )

            { ----------------------------------------------------- }

            %advanced_view[009] := get_ui_id(@Theme              ) {values must match UI_Elements array}
            %advanced_view[010] := get_ui_id($Theme              )
            %advanced_view[011] := get_ui_id(@KeyRangeTech       )
            %advanced_view[012] := get_ui_id($KeyRangeTech       )
            %advanced_view[008] := get_ui_id($tech_display       )
            %advanced_view[312] := get_ui_id($stretch_mode       )
            %advanced_view[323] := get_ui_id(@Fast2              )
            %advanced_view[324] := get_ui_id($slur_fast2_menu    )

            { ----------------------------------------------------- }

            %ENV_Element[01] := get_ui_id($C_env                )
            %ENV_Element[02] := get_ui_id($A_env                )
            %ENV_Element[03] := get_ui_id($H_env                )
            %ENV_Element[04] := get_ui_id($D_env                )
            %ENV_Element[05] := get_ui_id($S_env                )
            %ENV_Element[06] := get_ui_id($R_env                )

            { ----------------------------------------------------- }

            %MIC_Label[ 1]  := get_ui_id(@Mic1                  )
            %MIC_Label[ 2]  := get_ui_id(@Mic2                  )
            %MIC_Label[ 3]  := get_ui_id(@Mic3                  )
            %MIC_Label[ 4]  := get_ui_id(@Mic4                  )
            %MIC_Label[ 5]  := get_ui_id(@Mic5                  )
            %MIC_Label[ 6]  := get_ui_id(@Mic6                  )
            %MIC_Label[ 7]  := get_ui_id(@Mic7                  )
            %MIC_Label[ 8]  := get_ui_id(@Mic8                  )
            %MIC_Label[ 9]  := get_ui_id(@Mic9                  )
            %MIC_Label[10]  := get_ui_id(@Mic10                 )
            %MIC_Label[11]  := get_ui_id(@Mic11                 )
            %MIC_Label[12]  := get_ui_id(@Mic12                 )
            %MIC_Label[13]  := get_ui_id(@Mic13                 )
            %MIC_Label[14]  := get_ui_id(@Mic14                 )
            %MIC_Label[15]  := get_ui_id(@Mic15                 )
            %MIC_Label[16]  := get_ui_id(@Mic16                 )
            %MIC_Slider[ 1] := get_ui_id($Mic_Bus1              )
            %MIC_Slider[ 2] := get_ui_id($Mic_Bus2              )
            %MIC_Slider[ 3] := get_ui_id($Mic_Bus3              )
            %MIC_Slider[ 4] := get_ui_id($Mic_Bus4              )
            %MIC_Slider[ 5] := get_ui_id($Mic_Bus5              )
            %MIC_Slider[ 6] := get_ui_id($Mic_Bus6              )
            %MIC_Slider[ 7] := get_ui_id($Mic_Bus7              )
            %MIC_Slider[ 8] := get_ui_id($Mic_Bus8              )
            %MIC_Slider[ 9] := get_ui_id($Mic_Bus9              )
            %MIC_Slider[10] := get_ui_id($Mic_Bus10             )
            %MIC_Slider[11] := get_ui_id($Mic_Bus11             )
            %MIC_Slider[12] := get_ui_id($Mic_Bus12             )
            %MIC_Slider[13] := get_ui_id($Mic_Bus13             )
            %MIC_Slider[14] := get_ui_id($Mic_Bus14             )
            %MIC_Slider[15] := get_ui_id($Mic_Bus15             )
            %MIC_Slider[16] := get_ui_id($Mic_Bus16             )

    {#####################################################################################}
    { ------------------------------------ HELP TIPS ------------------------------------ }

        set_control_par_str(get_ui_id( $main_volume                      ), $CONTROL_PAR_HELP, "Instrument Volume")
        set_control_par_str(get_ui_id( @MIX                              ), $CONTROL_PAR_HELP, "CTRL + MAIN (page button) sets all mixes to default volume")
        set_control_par_str(get_ui_id( $MIX                              ), $CONTROL_PAR_HELP, "CTRL + MAIN (page button) sets all mixes to default volume")
        set_control_par_str(get_ui_id( $humanize                         ), $CONTROL_PAR_HELP, "Humanize drawn performances (score or P-roll) - SHIFT sets quantize window to ID downbeats")
        set_control_par_str(get_ui_id( $legato_speed                     ), $CONTROL_PAR_HELP, "This sets how fast notes have to be played to hear a faster legato transition, Higher = faster")
        set_control_par_str(get_ui_id( $width                            ), $CONTROL_PAR_HELP, "Stereo Width - Mic width control can be added under instrument bus FX")
        set_control_par_str(get_ui_id( $dynamic_range                    ), $CONTROL_PAR_HELP, "Dynamic Range - Entire Instrument - CTRL unlocks/resets all techniques back to this slider and the default dynamic range.")
        set_control_par_str(get_ui_id( $Mic_Bus1                         ), $CONTROL_PAR_HELP, "CTRL = Default Volume,  CTRL+SHIFT = Default Vol (all mics),  AUTOMATE FADERS (ALT+Click any mic, change MIX #, ALT+Click any mic)")
        set_control_par_str(get_ui_id( $Mic_Bus2                         ), $CONTROL_PAR_HELP, "CTRL = Default Volume,  CTRL+SHIFT = Default Vol (all mics),  AUTOMATE FADERS (ALT+Click any mic, change MIX #, ALT+Click any mic)")
        set_control_par_str(get_ui_id( $Mic_Bus3                         ), $CONTROL_PAR_HELP, "CTRL = Default Volume,  CTRL+SHIFT = Default Vol (all mics),  AUTOMATE FADERS (ALT+Click any mic, change MIX #, ALT+Click any mic)")
        set_control_par_str(get_ui_id( $Mic_Bus4                         ), $CONTROL_PAR_HELP, "CTRL = Default Volume,  CTRL+SHIFT = Default Vol (all mics),  AUTOMATE FADERS (ALT+Click any mic, change MIX #, ALT+Click any mic)")
        set_control_par_str(get_ui_id( $Mic_Bus5                         ), $CONTROL_PAR_HELP, "CTRL = Default Volume,  CTRL+SHIFT = Default Vol (all mics),  AUTOMATE FADERS (ALT+Click any mic, change MIX #, ALT+Click any mic)")
        set_control_par_str(get_ui_id( $Mic_Bus6                         ), $CONTROL_PAR_HELP, "CTRL = Default Volume,  CTRL+SHIFT = Default Vol (all mics),  AUTOMATE FADERS (ALT+Click any mic, change MIX #, ALT+Click any mic)")
        set_control_par_str(get_ui_id( $Mic_Bus7                         ), $CONTROL_PAR_HELP, "CTRL = Default Volume,  CTRL+SHIFT = Default Vol (all mics),  AUTOMATE FADERS (ALT+Click any mic, change MIX #, ALT+Click any mic)")
        set_control_par_str(get_ui_id( $Mic_Bus8                         ), $CONTROL_PAR_HELP, "CTRL = Default Volume,  CTRL+SHIFT = Default Vol (all mics),  AUTOMATE FADERS (ALT+Click any mic, change MIX #, ALT+Click any mic)")
        set_control_par_str(get_ui_id( $Mic_Bus9                         ), $CONTROL_PAR_HELP, "CTRL = Default Volume,  CTRL+SHIFT = Default Vol (all mics),  AUTOMATE FADERS (ALT+Click any mic, change MIX #, ALT+Click any mic)")
        set_control_par_str(get_ui_id( $Mic_Bus10                        ), $CONTROL_PAR_HELP, "CTRL = Default Volume,  CTRL+SHIFT = Default Vol (all mics),  AUTOMATE FADERS (ALT+Click any mic, change MIX #, ALT+Click any mic)")
        set_control_par_str(get_ui_id( $Mic_Bus11                        ), $CONTROL_PAR_HELP, "CTRL = Default Volume,  CTRL+SHIFT = Default Vol (all mics),  AUTOMATE FADERS (ALT+Click any mic, change MIX #, ALT+Click any mic)")
        set_control_par_str(get_ui_id( $Mic_Bus12                        ), $CONTROL_PAR_HELP, "CTRL = Default Volume,  CTRL+SHIFT = Default Vol (all mics),  AUTOMATE FADERS (ALT+Click any mic, change MIX #, ALT+Click any mic)")
        set_control_par_str(get_ui_id( $Mic_Bus13                        ), $CONTROL_PAR_HELP, "CTRL = Default Volume,  CTRL+SHIFT = Default Vol (all mics),  AUTOMATE FADERS (ALT+Click any mic, change MIX #, ALT+Click any mic)")
        set_control_par_str(get_ui_id( $Mic_Bus14                        ), $CONTROL_PAR_HELP, "CTRL = Default Volume,  CTRL+SHIFT = Default Vol (all mics),  AUTOMATE FADERS (ALT+Click any mic, change MIX #, ALT+Click any mic)")
        set_control_par_str(get_ui_id( $Mic_Bus15                        ), $CONTROL_PAR_HELP, "CTRL = Default Volume,  CTRL+SHIFT = Default Vol (all mics),  AUTOMATE FADERS (ALT+Click any mic, change MIX #, ALT+Click any mic)")
        set_control_par_str(get_ui_id( $Mic_Bus16                        ), $CONTROL_PAR_HELP, "CTRL = Default Volume,  CTRL+SHIFT = Default Vol (all mics),  AUTOMATE FADERS (ALT+Click any mic, change MIX #, ALT+Click any mic)")
        set_control_par_str(get_ui_id( $Page_Main                        ), $CONTROL_PAR_HELP, "ALT = Theme Settings, CTRL + SHIFT + ALT = Restores all mixes to default volume (a master reset)")
        set_control_par_str(get_ui_id( $Page_Play                        ), $CONTROL_PAR_HELP, "ALT toggles whether Mic Steps affect the entire technique or just RR groups")
        set_control_par_str(get_ui_id( $Page_Behavior                    ), $CONTROL_PAR_HELP, "ALT = toggle same RR for release or cycle all rls groups (default) - CTRL + ALT + SHIFT = Show/Hide currently unusable techniques from menus")
        set_control_par_str(get_ui_id( $KeyRangeTech                     ), $CONTROL_PAR_HELP, "Technique # to set instrument key range (visibility, legato)")
        set_control_par_str(get_ui_id( $read_step_velocity               ), $CONTROL_PAR_HELP, "Enable/Bypass STEP velocity (bypassed by default)")
        set_control_par_str(get_ui_id( $draw_mode                        ), $CONTROL_PAR_HELP, "CTRL=Inverse, ALT=retrograde, CLICK=DRAW (see slider help) - Disable DRAW to apply changes.")
        set_control_par_str(get_ui_id( $save_preset                      ), $CONTROL_PAR_HELP, "Overwrite Step Table preset")
        set_control_par_str(get_ui_id( $play_slider                      ), $CONTROL_PAR_HELP, "DRAW mode adds 3 modes to this slider. Normal, CTRL, & ALT - Disable DRAW to apply changes.")
        set_control_par_str(get_ui_id( $play_menu                        ), $CONTROL_PAR_HELP, "Stretch and Filters only work if enabled for the current technique.")
        set_control_par_str(get_ui_id( %StepTable                        ), $CONTROL_PAR_HELP, "SHIFT disables snap-to-grid")
        set_control_par_str(get_ui_id( $rr_menu                          ), $CONTROL_PAR_HELP, "Use RR groups from a different technique instead.")
        set_control_par_str(get_ui_id( $rls_menu                         ), $CONTROL_PAR_HELP, "Use Release groups from a different technique instead.")
        set_control_par_str(get_ui_id( $slur_slow_menu                   ), $CONTROL_PAR_HELP, "Set which technique's legato groups to use for slowest play speed.")
        set_control_par_str(get_ui_id( $slur_moderate_menu               ), $CONTROL_PAR_HELP, "Set which technique's legato groups to use for moderate play speed.")
        set_control_par_str(get_ui_id( $slur_fast_menu                   ), $CONTROL_PAR_HELP, "Set which technique's legato groups to use for fastest play speed.")
        set_control_par_str(get_ui_id( $slur_fast2_menu                  ), $CONTROL_PAR_HELP, "Fast legato XF option. A second group can play and be crossfaded to if desired.")
        set_control_par_str(get_ui_id( $xf_menu                          ), $CONTROL_PAR_HELP, "Select an additional technique to crossfade with.")
        set_control_par_str(get_ui_id( $rr_mode_menu                     ), $CONTROL_PAR_HELP, "HUMAN: non-repeat shuffle. ANDROID: mimics Human but editable & w/ less CPU. CYCLE: 1234..")
        set_control_par_str(get_ui_id( $percussion_mode                  ), $CONTROL_PAR_HELP, "On = 1 technique per key - all other features work except legato.")
        set_control_par_str(get_ui_id( $uses_filters                     ), $CONTROL_PAR_HELP, "If off, filters are bypassed so PLAY Stepper doesn't alter an instrument's character pre hoc.")
        set_control_par_str(get_ui_id( $ModVel_mode                      ), $CONTROL_PAR_HELP, "If a technique uses modwheel for dynamics, this sets velocity for added RR attack samples.")
        set_control_par_str(get_ui_id( $stretch_mode                     ), $CONTROL_PAR_HELP, "On = stretch RR-Attack. Off = Stretch all samples - TS-Pro must be enabled in Kontakt.")
        set_control_par_str(get_ui_id( $tech_dyn_range                   ), $CONTROL_PAR_HELP, "Dynamic Range (technique specific). Reset all via the MAIN page Dynamics (using CTRL).")
        set_control_par_str(get_ui_id( $C_env                            ), $CONTROL_PAR_HELP, "CURVE for Technique Sub-Menu")
        set_control_par_str(get_ui_id( $A_env                            ), $CONTROL_PAR_HELP, "ATTACK for Technique Sub-Menu")
        set_control_par_str(get_ui_id( $H_env                            ), $CONTROL_PAR_HELP, "HOLD for Technique Sub-Menu")
        set_control_par_str(get_ui_id( $D_env                            ), $CONTROL_PAR_HELP, "DECAY for Technique Sub-Menu")
        set_control_par_str(get_ui_id( $S_env                            ), $CONTROL_PAR_HELP, "SUSTAIN for Technique Sub-Menu")
        set_control_par_str(get_ui_id( $R_env                            ), $CONTROL_PAR_HELP, "RELEASE for Technique Sub-Menu")
        set_control_par_str(get_ui_id( $Theme                            ), $CONTROL_PAR_HELP, "Instrument Wallpaper")

    {#####################################################################################}
    { ---------------------------------- APPLY THEMES ----------------------------------- }

        set_control_par_str(get_ui_id($MIX),          $CONTROL_PAR_TEXT,"")
        set_control_par_str(get_ui_id($STEPS),        $CONTROL_PAR_TEXT,"")
        set_control_par_str(get_ui_id($Theme),        $CONTROL_PAR_TEXT,"")
        set_control_par_str(get_ui_id($KeyRangeTech), $CONTROL_PAR_TEXT,"")

        set_control_par(get_ui_id($playing),      $CONTROL_PAR_WIDTH,  230)
        set_control_par(get_ui_id($tech_display), $CONTROL_PAR_WIDTH,  140)

        set_control_par(get_ui_id($playing),       $CONTROL_PAR_HEIGHT, 30)
        set_control_par(get_ui_id($tech_display),  $CONTROL_PAR_HEIGHT, 30)

        set_control_par(get_ui_id(%StepTable),    $CONTROL_PAR_WIDTH,  374)
        set_control_par(get_ui_id(%StepTable),    $CONTROL_PAR_HEIGHT, 183)

        set_control_par(get_ui_id(@PATCH_NAME),   $CONTROL_PAR_WIDTH,  147)
        set_control_par(get_ui_id(@PLAYER),       $CONTROL_PAR_WIDTH,  147)
        set_control_par(get_ui_id(@PERFORMANCE),  $CONTROL_PAR_WIDTH,  147)
        set_control_par(get_ui_id(@LEGATO),       $CONTROL_PAR_WIDTH,  147)
        set_control_par(get_ui_id(@PLAYBACK),     $CONTROL_PAR_WIDTH,  114)
        set_control_par(get_ui_id(@ENVELOPE),     $CONTROL_PAR_WIDTH,  147)
        set_control_par(get_ui_id(@LOCK_DYNAMICS),$CONTROL_PAR_WIDTH,  114)

        set_control_par(get_ui_id(@MIX),                $CONTROL_PAR_WIDTH,   47)
        set_control_par(get_ui_id(@STEPS),              $CONTROL_PAR_WIDTH,   67)
        set_control_par(get_ui_id($save_preset),        $CONTROL_PAR_WIDTH,   20)
        set_control_par(get_ui_id($draw_mode),          $CONTROL_PAR_WIDTH,   20)
        set_control_par(get_ui_id($read_step_velocity), $CONTROL_PAR_WIDTH,   20)
        set_control_par(get_ui_id(@Theme),              $CONTROL_PAR_WIDTH,   61)
        set_control_par(get_ui_id(@KeyRangeTech),       $CONTROL_PAR_WIDTH,   63)
        set_control_par(get_ui_id(@Attack),             $CONTROL_PAR_WIDTH,   61)
        set_control_par(get_ui_id(@XF_selection),       $CONTROL_PAR_WIDTH,   61)
        set_control_par(get_ui_id(@Release),            $CONTROL_PAR_WIDTH,   61)
        set_control_par(get_ui_id(@ModVel),             $CONTROL_PAR_WIDTH,   61)
        set_control_par(get_ui_id(@Slow),               $CONTROL_PAR_WIDTH,   61)
        set_control_par(get_ui_id(@Moderate),           $CONTROL_PAR_WIDTH,   61)
        set_control_par(get_ui_id(@Fast),               $CONTROL_PAR_WIDTH,   61)
        set_control_par(get_ui_id(@Fast2),              $CONTROL_PAR_WIDTH,   61)
        set_control_par(get_ui_id(@SignalVolume),      $CONTROL_PAR_WIDTH,   130)

        set_control_par(get_ui_id($playing),            $CONTROL_PAR_TEXT_ALIGNMENT,2)
        set_control_par(get_ui_id(@PATCH_NAME),         $CONTROL_PAR_TEXT_ALIGNMENT,2)
        set_control_par(get_ui_id(@PLAYER),             $CONTROL_PAR_TEXT_ALIGNMENT,1)
        set_control_par(get_ui_id(@PERFORMANCE),        $CONTROL_PAR_TEXT_ALIGNMENT,1)
        set_control_par(get_ui_id(@LEGATO),             $CONTROL_PAR_TEXT_ALIGNMENT,1)
        set_control_par(get_ui_id(@PLAYBACK),           $CONTROL_PAR_TEXT_ALIGNMENT,1)
        set_control_par(get_ui_id(@LOCK_DYNAMICS),      $CONTROL_PAR_TEXT_ALIGNMENT,1)
        set_control_par(get_ui_id(@MIX),                $CONTROL_PAR_TEXT_ALIGNMENT,2)
        set_control_par(get_ui_id(@SignalVolume),       $CONTROL_PAR_TEXT_ALIGNMENT,1)
        set_control_par(get_ui_id(@ENVELOPE),           $CONTROL_PAR_TEXT_ALIGNMENT,1)
        set_control_par(get_ui_id(@STEPS),              $CONTROL_PAR_TEXT_ALIGNMENT,2)
        set_control_par(get_ui_id(@XF_selection),       $CONTROL_PAR_TEXT_ALIGNMENT,2)
        set_control_par(get_ui_id(@Attack),             $CONTROL_PAR_TEXT_ALIGNMENT,2)
        set_control_par(get_ui_id(@Release),            $CONTROL_PAR_TEXT_ALIGNMENT,2)
        set_control_par(get_ui_id(@ModVel),             $CONTROL_PAR_TEXT_ALIGNMENT,2)
        set_control_par(get_ui_id(@Slow),               $CONTROL_PAR_TEXT_ALIGNMENT,2)
        set_control_par(get_ui_id(@Moderate),           $CONTROL_PAR_TEXT_ALIGNMENT,2)
        set_control_par(get_ui_id(@Fast),               $CONTROL_PAR_TEXT_ALIGNMENT,2)
        set_control_par(get_ui_id(@Fast2),              $CONTROL_PAR_TEXT_ALIGNMENT,2)
        set_control_par(get_ui_id($save_preset),        $CONTROL_PAR_TEXT_ALIGNMENT,1)
        set_control_par(get_ui_id($draw_mode),          $CONTROL_PAR_TEXT_ALIGNMENT,1)
        set_control_par(get_ui_id($read_step_velocity), $CONTROL_PAR_TEXT_ALIGNMENT,1)

        set_control_par(get_ui_id($Page_Main),         $CONTROL_PAR_FONT_TYPE, 17)
        set_control_par(get_ui_id($Page_Play),         $CONTROL_PAR_FONT_TYPE, 17)
        set_control_par(get_ui_id($Page_Behavior),     $CONTROL_PAR_FONT_TYPE, 17)
        set_control_par(get_ui_id($Page_Waveform),     $CONTROL_PAR_FONT_TYPE, 17)
        set_control_par(get_ui_id($Page_Main),      $CONTROL_PAR_TEXT_ALIGNMENT,1)
        set_control_par(get_ui_id($Page_Play),      $CONTROL_PAR_TEXT_ALIGNMENT,1)
        set_control_par(get_ui_id($Page_Behavior),  $CONTROL_PAR_TEXT_ALIGNMENT,1)
        set_control_par(get_ui_id($Page_Waveform),  $CONTROL_PAR_TEXT_ALIGNMENT,1)

        set_control_par(get_ui_id($main_volume),    $CONTROL_PAR_MOUSE_BEHAVIOUR,-2330)
        set_control_par(get_ui_id($play_slider),    $CONTROL_PAR_MOUSE_BEHAVIOUR,-2330)

        set_control_par(get_ui_id($humanize),       $CONTROL_PAR_MOUSE_BEHAVIOUR,-2330)
        set_control_par(get_ui_id($legato_speed),   $CONTROL_PAR_MOUSE_BEHAVIOUR,-2330)
        set_control_par(get_ui_id($width),          $CONTROL_PAR_MOUSE_BEHAVIOUR,-2330)
        set_control_par(get_ui_id($dynamic_range),  $CONTROL_PAR_MOUSE_BEHAVIOUR,-2330)
        set_control_par(get_ui_id($tech_dyn_range), $CONTROL_PAR_MOUSE_BEHAVIOUR,-2330)
        set_control_par(get_ui_id($xfade_curve),    $CONTROL_PAR_MOUSE_BEHAVIOUR,-2330)
        set_control_par(get_ui_id($C_env),          $CONTROL_PAR_MOUSE_BEHAVIOUR,-2330)
        set_control_par(get_ui_id($A_env),          $CONTROL_PAR_MOUSE_BEHAVIOUR,-2330)
        set_control_par(get_ui_id($D_env),          $CONTROL_PAR_MOUSE_BEHAVIOUR,-2330)
        set_control_par(get_ui_id($H_env),          $CONTROL_PAR_MOUSE_BEHAVIOUR,-2330)
        set_control_par(get_ui_id($S_env),          $CONTROL_PAR_MOUSE_BEHAVIOUR,-2330)
        set_control_par(get_ui_id($R_env),          $CONTROL_PAR_MOUSE_BEHAVIOUR,-2330)

        set_control_par(get_ui_id($rr_menu),             $CONTROL_PAR_TEXTPOS_Y, 1)
        set_control_par(get_ui_id($rls_menu),            $CONTROL_PAR_TEXTPOS_Y, 1)
        set_control_par(get_ui_id($play_menu),           $CONTROL_PAR_TEXTPOS_Y, 1)
        set_control_par(get_ui_id($rr_mode_menu),        $CONTROL_PAR_TEXTPOS_Y, 1)
        set_control_par(get_ui_id($ModVel_mode),         $CONTROL_PAR_TEXTPOS_Y, 1)
        set_control_par(get_ui_id($slur_fast_menu),      $CONTROL_PAR_TEXTPOS_Y, 1)
        set_control_par(get_ui_id($slur_slow_menu),      $CONTROL_PAR_TEXTPOS_Y, 1)
        set_control_par(get_ui_id($slur_fast2_menu),     $CONTROL_PAR_TEXTPOS_Y, 1)
        set_control_par(get_ui_id($xf_menu),             $CONTROL_PAR_TEXTPOS_Y, 1)
        set_control_par(get_ui_id($play_preset_menu),    $CONTROL_PAR_TEXTPOS_Y, 1)
        set_control_par(get_ui_id($slur_moderate_menu),  $CONTROL_PAR_TEXTPOS_Y, 1)
        set_control_par(get_ui_id($technique_menu),      $CONTROL_PAR_TEXTPOS_Y, 1)
        set_control_par(get_ui_id($Waveform_menu),       $CONTROL_PAR_TEXTPOS_Y, 1)
        set_control_par(get_ui_id($save_preset),         $CONTROL_PAR_TEXTPOS_Y, 1)
        set_control_par(get_ui_id($draw_mode),           $CONTROL_PAR_TEXTPOS_Y, 1)
        set_control_par(get_ui_id($read_step_velocity),  $CONTROL_PAR_TEXTPOS_Y, 1)

        $x := 1
        while ($x < $max_mics + 1)
            set_control_par_str(%MIC_Slider[$x], $CONTROL_PAR_PICTURE,"white_slider_small")
            inc($x)
        end while

        $x := 0
        while ($x < $Total_UI+1) 
            set_control_par  (%UI_Elements[$x],   $CONTROL_PAR_FONT_TYPE, 17)
            inc($x)
        end while

        set_control_par_str(get_ui_id($main_volume),        $CONTROL_PAR_PICTURE, "white_slider_big")
        set_control_par_str(get_ui_id($humanize),           $CONTROL_PAR_PICTURE, "white_slider_humanize")
        set_control_par_str(get_ui_id($legato_speed),       $CONTROL_PAR_PICTURE, "white_slider_legato_speed")
        set_control_par_str(get_ui_id($width),              $CONTROL_PAR_PICTURE, "white_slider_width")
        set_control_par_str(get_ui_id($play_slider),        $CONTROL_PAR_PICTURE, "white_slider_big")
        set_control_par_str(get_ui_id($dynamic_range),      $CONTROL_PAR_PICTURE, "white_slider_dynamic")
        set_control_par_str(get_ui_id($tech_dyn_range),     $CONTROL_PAR_PICTURE, "white_slider_dynamic")
        set_control_par_str(get_ui_id($xfade_curve),        $CONTROL_PAR_PICTURE, "white_slider_xfade")
        set_control_par_str(get_ui_id($C_env),              $CONTROL_PAR_PICTURE, "white_slider_curve")
        set_control_par_str(get_ui_id($A_env),              $CONTROL_PAR_PICTURE, "white_slider_attack")
        set_control_par_str(get_ui_id($D_env),              $CONTROL_PAR_PICTURE, "white_slider_decay")
        set_control_par_str(get_ui_id($H_env),              $CONTROL_PAR_PICTURE, "white_slider_hold")
        set_control_par_str(get_ui_id($S_env),              $CONTROL_PAR_PICTURE, "white_slider_sustain")
        set_control_par_str(get_ui_id($R_env),              $CONTROL_PAR_PICTURE, "white_slider_release")

        set_control_par_str(get_ui_id($Page_Main),          $CONTROL_PAR_PICTURE, "white_button")
        set_control_par_str(get_ui_id($Page_Play),          $CONTROL_PAR_PICTURE, "white_button")
        set_control_par_str(get_ui_id($Page_Behavior),      $CONTROL_PAR_PICTURE, "white_button")
        set_control_par_str(get_ui_id($Page_Waveform),      $CONTROL_PAR_PICTURE, "white_button")
        set_control_par_str(get_ui_id($percussion_mode),    $CONTROL_PAR_PICTURE, "white_button")
        set_control_par_str(get_ui_id($uses_filters),       $CONTROL_PAR_PICTURE, "white_button")
        set_control_par_str(get_ui_id($stretch_mode),       $CONTROL_PAR_PICTURE, "white_button")
        set_control_par_str(get_ui_id($save_preset),        $CONTROL_PAR_PICTURE, "white_button")
        set_control_par_str(get_ui_id($draw_mode),          $CONTROL_PAR_PICTURE, "white_button")
        set_control_par_str(get_ui_id($read_step_velocity), $CONTROL_PAR_PICTURE, "white_button")

        set_control_par_str(get_ui_id($rr_menu),            $CONTROL_PAR_PICTURE, "white_menu")
        set_control_par_str(get_ui_id($rls_menu),           $CONTROL_PAR_PICTURE, "white_menu")
        set_control_par_str(get_ui_id($play_menu),          $CONTROL_PAR_PICTURE, "white_menu")
        set_control_par_str(get_ui_id($rr_mode_menu),       $CONTROL_PAR_PICTURE, "white_menu")
        set_control_par_str(get_ui_id($ModVel_mode),        $CONTROL_PAR_PICTURE, "white_menu")
        set_control_par_str(get_ui_id($slur_fast_menu),     $CONTROL_PAR_PICTURE, "white_menu")
        set_control_par_str(get_ui_id($slur_slow_menu),     $CONTROL_PAR_PICTURE, "white_menu")
        set_control_par_str(get_ui_id($slur_fast2_menu),    $CONTROL_PAR_PICTURE, "white_menu")
        set_control_par_str(get_ui_id($xf_menu),            $CONTROL_PAR_PICTURE, "white_menu")
        set_control_par_str(get_ui_id($play_preset_menu),   $CONTROL_PAR_PICTURE, "white_menu")
        set_control_par_str(get_ui_id($slur_moderate_menu), $CONTROL_PAR_PICTURE, "white_menu")
        set_control_par_str(get_ui_id($technique_menu),     $CONTROL_PAR_PICTURE, "white_menu")
        set_control_par_str(get_ui_id($Waveform_menu),      $CONTROL_PAR_PICTURE, "white_menu")

    {#####################################################################################}
    { ------------------------------- PLACE UI ELEMENTS --------------------------------- }

        declare $mic_fader_x_position := 283
        declare $mic_fader_y_position := 52
        move_control_px (@MIX,$mic_fader_x_position +    54,  28     ) {MIX_POSITION - Decrease first number}
        move_control_px ($MIX,$mic_fader_x_position +    50,  28     ) {MIX_POSITION - Increase first number}

        $x := 1 {Mic ID}
        $y := 1 {Counter}
        while ($x < ($max_mics/2)+1)
            set_control_par(%MIC_Slider[$x],  $CONTROL_PAR_POS_X,   (21*$y)+$mic_fader_x_position)
            set_control_par(%MIC_Slider[$x],  $CONTROL_PAR_POS_Y,   15 + $mic_fader_y_position)
            set_control_par(%MIC_Slider[$x],  $CONTROL_PAR_MOUSE_BEHAVIOUR,-2330)
            set_control_par(%MIC_Slider[$x],  $CONTROL_PAR_DEFAULT_VALUE,$default_volume)
            inc($x)
            inc($y)
        end while
        $y := 1
        while ($x < $max_mics+1) 
            set_control_par(%MIC_Slider[$x],  $CONTROL_PAR_POS_X,   (21*$y)+$mic_fader_x_position)
            set_control_par(%MIC_Slider[$x],  $CONTROL_PAR_POS_Y,   112 + $mic_fader_y_position)
            set_control_par(%MIC_Slider[$x],  $CONTROL_PAR_MOUSE_BEHAVIOUR,-2330)
            set_control_par(%MIC_Slider[$x],  $CONTROL_PAR_DEFAULT_VALUE,$default_volume)
            inc($x)
            inc($y)
        end while

        $x := 1
        $y := 1
        while ($x < ($max_mics/2)+1)
            set_control_par    (%MIC_Label[$x], $CONTROL_PAR_POS_X,   (21*$y)+$mic_fader_x_position-2)
            set_control_par    (%MIC_Label[$x], $CONTROL_PAR_POS_Y,    $mic_fader_y_position)
            set_control_par    (%MIC_Label[$x], $CONTROL_PAR_TEXT_ALIGNMENT,1)
            set_control_par_str(%MIC_Label[$x], $CONTROL_PAR_TEXT, "-")
            set_control_par    (%MIC_Label[$x], $CONTROL_PAR_WIDTH, 22)
            set_control_par    (%MIC_Label[$x], $CONTROL_PAR_FONT_TYPE, 13)
            inc($x)
            inc($y)
        end while
        $y := 1
        while ($x < $max_mics+1) 
            set_control_par    (%MIC_Label[$x], $CONTROL_PAR_POS_X,   (21*$y)+$mic_fader_x_position-2)
            set_control_par    (%MIC_Label[$x], $CONTROL_PAR_POS_Y,   97 + $mic_fader_y_position)
            set_control_par    (%MIC_Label[$x], $CONTROL_PAR_TEXT_ALIGNMENT,1)
            set_control_par_str(%MIC_Label[$x], $CONTROL_PAR_TEXT, "-")
            set_control_par    (%MIC_Label[$x], $CONTROL_PAR_WIDTH, 22)
            set_control_par    (%MIC_Label[$x], $CONTROL_PAR_FONT_TYPE, 13)
            inc($x)
            inc($y)
        end while

        move_control_px ($Page_Main                     ,494, 100    )
        move_control_px ($Page_Play                     ,494, 120    )
        move_control_px ($Page_Waveform                 ,494, 140    )
        move_control_px ($Page_Behavior                 ,494, 160    )

        move_control_px (@PLAYER                        ,107, 28     )
        move_control_px ($main_volume                   ,38,  52     )
        move_control_px ($humanize                      ,192, 60     )
        move_control_px ($legato_speed                  ,87,  60     )
        move_control_px ($width                         ,87,  163    )
        move_control_px ($dynamic_range                 ,192, 163    )
        move_control_px (@Theme                         ,499, 198    )
        move_control_px ($Theme                         ,503, 198    )
        move_control_px (@KeyRangeTech                  ,499, 218    )
        move_control_px ($KeyRangeTech                  ,503, 218    )
        move_control_px ($playing                       ,354, 25     )
        move_control_px (@PATCH_NAME                    ,354, 25     )
        move_control_px ($tech_display                  ,494, 45     )

        move_control_px ($play_menu                     ,34,   27    )
        move_control_px ($read_step_velocity            ,137,  27    )
        move_control_px ($play_slider                   ,38,   52    )
        move_control_px (@STEPS                         ,178,  28    )
        move_control_px ($STEPS                         ,199,  28    )
        move_control_px ($play_preset_menu              ,373,  27    )
        move_control_px ($draw_mode                     ,72,   223   )
        move_control_px (%StepTable                     ,89 ,  60    )
        move_control_px ($save_preset                   ,336,  27    )

        move_control_px (@PERFORMANCE                   ,40,  28     )
        move_control_px (@XF_selection                  ,28,  55     )
        move_control_px (@Attack                        ,28,  73     )
        move_control_px (@Release                       ,28,  91     )
        move_control_px (@ModVel                        ,28,  109    )
        move_control_px ($xf_menu                       ,92,  54     )
        move_control_px ($rr_menu                       ,92,  72     )
        move_control_px ($rls_menu                      ,92,  90     )
        move_control_px ($ModVel_mode                   ,92,  108    )

        move_control_px (@LEGATO                        ,40,  143    )
        move_control_px (@Slow                          ,28,  170    )
        move_control_px (@Moderate                      ,28,  188    )
        move_control_px (@Fast                          ,28,  206    )
        move_control_px (@Fast2                         ,28,  224    )
        move_control_px ($slur_slow_menu                ,92,  169    )
        move_control_px ($slur_moderate_menu            ,92,  187    )
        move_control_px ($slur_fast_menu                ,92,  205    )
        move_control_px ($slur_fast2_menu               ,92,  223    )

        move_control_px (@LOCK_DYNAMICS                 ,207,  143   )
        move_control_px ($tech_dyn_range                ,220,  163   )

        move_control_px (@PLAYBACK                      ,207,  28    )
        move_control_px ($rr_mode_menu                  ,220,  54    )
        move_control_px ($uses_filters                  ,220,  72    )
        move_control_px ($stretch_mode                  ,220,  90    )

        move_control_px (@INSTRUMENT                    ,354,  28    )
        move_control_px ($percussion_mode               ,347,  54    )

        move_control_px ($technique_menu                ,494,  27    )

        move_control_px (@SignalVolume                  ,32,  28     )
        move_control_px ($xfade_curve                   ,52,  60     )
        move_control_px (@ENVELOPE                     ,238,  28     )
        move_control_px ($C_env                        ,183,  60     )
        move_control_px ($A_env                        ,268,  60     )
        move_control_px ($H_env                        ,353,  60     )
        move_control_px ($D_env                        ,183,  163    )
        move_control_px ($S_env                        ,268,  163    )
        move_control_px ($R_env                        ,353,  163    )
        move_control_px ($Waveform_menu                ,494,  47     )

    {#####################################################################################}
    { -------------------------------- SAVE & LOAD DATA --------------------------------- }

        { ------- Load saved user-edited values & enable saving again ------- }

        read_persistent_var    ($Page                  )
        read_persistent_var    ($advanced_view         )
        read_persistent_var    ($Theme                 )
        read_persistent_var    ($KeyRangeTech          )
        read_persistent_var    ($play_menu             )
        read_persistent_var    ($play_preset_menu      )
        read_persistent_var    ($STEPS                 )
        read_persistent_var    ($MIX                   )
        read_persistent_var    (%tech_uses_filters     )
        read_persistent_var    (%use_tech_xfade        )
        read_persistent_var    (%play_menu_value       )
        read_persistent_var    (%mix_saves             )
        read_persistent_var    (%stepstorage           )
        read_persistent_var    (%steppresets           )
        read_persistent_var    (%use_rr                )
        read_persistent_var    (%use_rls               )
        read_persistent_var    (%slur_slow             )
        read_persistent_var    (%slur_moderate         )
        read_persistent_var    (%slur_fast             )
        read_persistent_var    (%slur_fast2            )
        read_persistent_var    (%rr_mode               )
        read_persistent_var    ($percussion_mode       )
        read_persistent_var    ($stretch_mode          )
        read_persistent_var    ($rls_rr_matches_attack )
        read_persistent_var    ($menu_mode             )
        read_persistent_var    ($CC1_value             )
        read_persistent_var    ($read_step_velocity    )
        read_persistent_var    ($step_mic_rr_only      )
        read_persistent_var    ($legato_speed          )
        read_persistent_var    ($dynamic_range         )
        read_persistent_var    (@PLAYER                )
        read_persistent_var    (@PATCH_NAME            )
        read_persistent_var    (@STEPS                 )
        read_persistent_var    (@PERFORMANCE           )
        read_persistent_var    (@LEGATO                )
        read_persistent_var    (@PLAYBACK              )
        read_persistent_var    (@LOCK_DYNAMICS         )
        read_persistent_var    (@MIX                   )
        read_persistent_var    (@ENVELOPE              )
        read_persistent_var    (@Mic1                  )
        read_persistent_var    (@Mic2                  )
        read_persistent_var    (@Mic3                  )
        read_persistent_var    (@Mic4                  )
        read_persistent_var    (@Mic5                  )
        read_persistent_var    (@Mic6                  )
        read_persistent_var    (@Mic7                  )
        read_persistent_var    (@Mic8                  )
        read_persistent_var    (@Mic9                  )
        read_persistent_var    (@Mic10                 )
        read_persistent_var    (@Mic11                 )
        read_persistent_var    (@Mic12                 )
        read_persistent_var    (@Mic13                 )
        read_persistent_var    (@Mic14                 )
        read_persistent_var    (@Mic15                 )
        read_persistent_var    (@Mic16                 )

        {This code, placed here, combined with various auto_save triggers, should make Kontakt 5 and Kontakt 6 draw_mode save behavior identical}
        set_table_steps_shown  (%StepTable,$STEPS)
        read_persistent_var    (%StepTable)
        make_persistent        (%StepTable)
        if ($draw_mode = 1) {If left on and auto_save function wasn't triggered... (apply after read_persistent BUT before make_persistent))}
            $x := 0
            $y := $max_steps
            while ($x < $y)
                %stepstorage[($play_menu * $max_steps) + $x] := %StepTable[$x]
                inc($x)
            end while
        end if

        make_persistent    ($Page                  )
        make_persistent    ($advanced_view         )
        make_persistent    ($Theme                 )
        make_persistent    ($KeyRangeTech          )
        make_persistent    ($play_menu             )
        make_persistent    ($play_preset_menu      )
        make_persistent    ($STEPS                 )
        make_persistent    ($MIX                   )
        make_persistent    (%tech_uses_filters     )
        make_persistent    (%use_tech_xfade        )
        make_persistent    (%play_menu_value       )
        make_persistent    (%mix_saves             )
        make_persistent    (%stepstorage           )
        make_persistent    (%steppresets           )
        make_persistent    (%use_rr                )
        make_persistent    (%use_rls               )
        make_persistent    (%slur_slow             )
        make_persistent    (%slur_moderate         )
        make_persistent    (%slur_fast             )
        make_persistent    (%slur_fast2            )
        make_persistent    (%rr_mode               )
        make_persistent    ($percussion_mode       )
        make_persistent    ($stretch_mode          )
        make_persistent    ($rls_rr_matches_attack )
        make_persistent    ($menu_mode             )
        make_persistent    ($CC1_value             )
        make_persistent    ($read_step_velocity    )
        make_persistent    ($step_mic_rr_only      )
        make_persistent    ($legato_speed          )
        make_persistent    ($dynamic_range         )
        make_persistent    (@PLAYER                )
        make_persistent    (@PATCH_NAME            )
        make_persistent    (@STEPS                 )
        make_persistent    (@PERFORMANCE           )
        make_persistent    (@LEGATO                )
        make_persistent    (@PLAYBACK              )
        make_persistent    (@LOCK_DYNAMICS         )
        make_persistent    (@MIX                   )
        make_persistent    (@ENVELOPE              )
        make_persistent    (@Mic1                  )
        make_persistent    (@Mic2                  )
        make_persistent    (@Mic3                  )
        make_persistent    (@Mic4                  )
        make_persistent    (@Mic5                  )
        make_persistent    (@Mic6                  )
        make_persistent    (@Mic7                  )
        make_persistent    (@Mic8                  )
        make_persistent    (@Mic9                  )
        make_persistent    (@Mic10                 )
        make_persistent    (@Mic11                 )
        make_persistent    (@Mic12                 )
        make_persistent    (@Mic13                 )
        make_persistent    (@Mic14                 )
        make_persistent    (@Mic15                 )
        make_persistent    (@Mic16                 )

        set_engine_par($ENGINE_PAR_VOLUME,$main_volume,-1,-1,-1)
        set_engine_par($ENGINE_PAR_STEREO,$width,-1,1,-1)


    {#####################################################################################}
    { ---------------------------------- FINALIZE KSP ----------------------------------- }

            SET_CONDITION(NO_SYS_SCRIPT_RLS_TRIG)
            set_key_pressed_support(1)
            set_snapshot_type(1)
            reset_ksp_timer

            set_script_title(                                             "Tabernacle"  )
            set_control_par_str($INST_ICON_ID,$CONTROL_PAR_PICTURE,       "icon"        )
            set_control_par_str($INST_WALLPAPER_ID,$CONTROL_PAR_PICTURE,  "wallpaper"   )
            make_perfview
            set_ui_height_px(279)
            set_skin_offset(($Theme*347)-347)

            message("")
        end on


{#####################################################################################}
{------------------------------------ END ON INIT ------------------------------------}
{#####################################################################################}

{#####################################################################################}
{ - FUNCTIONS FUNCTIONS FUNCTIONS FUNCTIONS FUNCTIONS FUNCTIONS FUNCTIONS FUNCTIONS - }
{#####################################################################################}

{#####################################################################################}
{ ------------------------------- FUNCTIONS: SAMPLES -------------------------------- }
{#####################################################################################}

    function findsamples

        {FIND MICS, COUNT/SAVE GROUP ID'S}
        $x := 1
        $y := 0
        while ($x < $max_mics + 1)
            $y := find_group(!mic_search_term[$x])
            %mic[$x] := $y
            inc($x)
        end while   
        $x := 2
        $num_of_mics := 1
        while ($x < $max_mics + 1)
            if (%mic[$x] > 0)
                inc($num_of_mics)
            end if
            inc($x)
        end while

        {ADD MICS TO MENUS, HIDE MIC PLACEHOLDERS}
        $x := 1
        while ($x < $num_of_mics+1)
            $y := $init_play_menu_items - 1 + $x
            set_menu_item_str (get_ui_id($play_menu), $y, !mic_name[$x])
            inc($x)
        end while
        $x := $num_of_mics+1
        while ($x < $max_mics + 1)
            $y := $init_play_menu_items - 1 + $x
            set_menu_item_visibility (get_ui_id($play_menu), $y, 0)
            inc($x)
        end while

        {SAVE TECHNIQUE GROUP NAMES}
        $x := 1
        $y := 1
        if ($num_of_mics > 1)
            $z := %mic[2]-1
        else
            $z := $NUM_GROUPS
        end if
        $num_of_techniques := 0
        while ($x < $z)
            if (find_group(!tech_search_term[$y]) = $x)
                %technique[$y] := $x
                !technique_name[$y] := group_name($x+1)
                set_menu_item_str (get_ui_id($technique_menu)      ,$y-1,!technique_name[$y])
                set_menu_item_str (get_ui_id($rr_menu)              ,$y, !technique_name[$y])
                set_menu_item_str (get_ui_id($rls_menu)             ,$y, !technique_name[$y])
                set_menu_item_str (get_ui_id($slur_slow_menu)       ,$y, !technique_name[$y])
                set_menu_item_str (get_ui_id($slur_moderate_menu)   ,$y, !technique_name[$y])
                set_menu_item_str (get_ui_id($slur_fast_menu)       ,$y, !technique_name[$y])
                set_menu_item_str (get_ui_id($slur_fast2_menu)      ,$y, !technique_name[$y])
                set_menu_item_str (get_ui_id($xf_menu)              ,$y, !technique_name[$y])
                inc($y)
                inc($num_of_techniques)
            end if
            inc($x)
        end while

        {TEMP CLEAN UP}

        {Set fake group # for an extra technique so the last real technique rr/rls/up/dn count can be counted dynamically}
        if ($num_of_mics > 1)
            %technique[$num_of_techniques+1] := %mic[$num_of_mics-1]
        else
            %technique[$num_of_techniques+1] := $NUM_GROUPS
        end if
        {Update menus to remove empty technique slots}
        $x := $num_of_techniques
        while ($x < $max_techniques)
            set_menu_item_visibility (get_ui_id($technique_menu),     $x,   0)
            set_menu_item_visibility (get_ui_id($rr_menu),            $x+1, 0)
            set_menu_item_visibility (get_ui_id($rls_menu),           $x+1, 0)
            set_menu_item_visibility (get_ui_id($slur_slow_menu),     $x+1, 0)
            set_menu_item_visibility (get_ui_id($slur_moderate_menu), $x+1, 0)
            set_menu_item_visibility (get_ui_id($slur_fast_menu),     $x+1, 0)
            set_menu_item_visibility (get_ui_id($slur_fast2_menu),    $x+1, 0)
            set_menu_item_visibility (get_ui_id($xf_menu),            $x+1, 0) {Initial removal of empty "" groups, but non-dynamic groups removed at end of function}
        inc($x)
        end while
        {Reset all technique 1st groups}
        $x := 1 {Dynamic_groups_code <-- don't remove this note, CTRL+F the term to see why}
        while ($x < $max_techniques)
            %technique_ppp        [$x] := 0
            %technique_pp         [$x] := 0
            %technique_p          [$x] := 0
            %technique_mp         [$x] := 0
            %technique_mf         [$x] := 0
            %technique_f          [$x] := 0
            %technique_ff         [$x] := 0
            %technique_fff        [$x] := 0
            %technique_rr1_group  [$x] := 0
            %technique_rls1_group [$x] := 0
            %technique_up1_group  [$x] := 0
            %technique_dn1_group  [$x] := 0
            inc($x)
        end while

        {FIND TECHNIQUE GROUPS}

        {ID Technique groups: their dynamics, rr's, releases, and intervals}
        $x := 1 {Dynamic_groups_code <-- don't remove this note, CTRL+F the term to see why}
        while ($x < $num_of_techniques+1)
            %technique_ppp          [$x] := find_group( !ppp_search_term[$x]  )
            %technique_pp           [$x] := find_group( !pp_search_term[$x]   )
            %technique_p            [$x] := find_group( !p_search_term[$x]    )
            %technique_mp           [$x] := find_group( !mp_search_term[$x]   )
            %technique_mf           [$x] := find_group( !mf_search_term[$x]   )
            %technique_f            [$x] := find_group( !f_search_term[$x]    )
            %technique_ff           [$x] := find_group( !ff_search_term[$x]   )
            %technique_fff          [$x] := find_group( !fff_search_term[$x]  )
            %technique_rr1_group    [$x] := find_group( !rr1_search_term[$x]  )
            %technique_rls1_group   [$x] := find_group( !rls1_search_term[$x] )
            %technique_up1_group    [$x] := find_group( !up1_search_term[$x]  )
            %technique_dn1_group    [$x] := find_group( !dn1_search_term[$x]  )
        inc($x)
        end while

        {reset the number of properly named dynamic groups found}
        $x := 1
        while ($x < $num_of_techniques+1)
            %tech_num_dyn_groups[$x] := 0
            inc($x)
        end while

        {Count the number of properly named dynamic groups found per technique... not with samples, just the # of available groups}
        $x := 1
        while ($x < $num_of_techniques+1)
            if (%technique_ppp[$x] # 0)
                inc(%tech_num_dyn_groups[$x])
            end if
            if (%technique_pp [$x] # 0)
                inc(%tech_num_dyn_groups[$x])
            end if
            if (%technique_p  [$x] # 0)
                inc(%tech_num_dyn_groups[$x])
            end if
            if (%technique_mp [$x] # 0)
                inc(%tech_num_dyn_groups[$x])
            end if
            if (%technique_mf [$x] # 0)
                inc(%tech_num_dyn_groups[$x])
            end if
            if (%technique_f  [$x] # 0)
                inc(%tech_num_dyn_groups[$x])
            end if
            if (%technique_ff [$x] # 0)
                inc(%tech_num_dyn_groups[$x])
            end if
            if (%technique_fff[$x] # 0)
                inc(%tech_num_dyn_groups[$x])
            end if
        inc($x)
        end while

        {Create group lists by playback type, to prepare to check for sample files)}
        $x := 1
        while ($x < $num_of_techniques+1)
            if (%technique_dn1_group[$x] > 0)
                %technique_dn_groups[$x] := %technique[$x+1]-%technique_dn1_group[$x]
                if (%technique_up1_group[$x] > 0)
                    %technique_up_groups[$x] := %technique_dn1_group[$x]-%technique_up1_group[$x]
                    if (%technique_rls1_group[$x] > 0)
                        %technique_rls_groups[$x] := %technique_up1_group[$x]-%technique_rls1_group[$x]
                        if (%technique_rr1_group[$x] > 0)
                            %technique_rr_groups[$x] := %technique_rls1_group[$x]-%technique_rr1_group[$x]
                        end if
                    else
                        if (%technique_rr1_group[$x] > 0)
                            %technique_rr_groups[$x] := %technique_up1_group[$x]-%technique_rr1_group[$x]
                        end if
                    end if
                else
                    if (%technique_rls1_group[$x] > 0)
                        %technique_rls_groups[$x] := %technique_dn1_group[$x]-%technique_rls1_group[$x]
                        if (%technique_rr1_group[$x] > 0)
                            %technique_rr_groups[$x] := %technique_rls1_group[$x]-%technique_rr1_group[$x]
                        end if
                    else
                        if (%technique_rr1_group[$x] > 0)
                            %technique_rr_groups[$x] := %technique_dn1_group[$x]-%technique_rr1_group[$x]
                        end if
                    end if
                end if
            else
                if (%technique_up1_group[$x] > 0)
                    %technique_up_groups[$x] := %technique[$x+1]-%technique_up1_group[$x]
                    if (%technique_rls1_group[$x] > 0)
                        %technique_rls_groups[$x] := %technique_up1_group[$x]-%technique_rls1_group[$x]
                        if (%technique_rr1_group[$x] > 0)
                            %technique_rr_groups[$x] := %technique_rls1_group[$x]-%technique_rr1_group[$x]
                        end if
                    else
                        if (%technique_rr1_group[$x] > 0)
                            %technique_rr_groups[$x] := %technique_up1_group[$x]-%technique_rr1_group[$x]
                        end if
                    end if
                else
                    if (%technique_rls1_group[$x] > 0)
                        %technique_rls_groups[$x] := %technique[$x+1]-%technique_rls1_group[$x]
                        if (%technique_rr1_group[$x] > 0)
                            %technique_rr_groups[$x] := %technique_rls1_group[$x]-%technique_rr1_group[$x]
                        end if
                    else
                        if (%technique_rr1_group[$x] > 0)
                            %technique_rr_groups[$x] := %technique[$x+1]-%technique_rr1_group[$x]
                        end if
                    end if
                end if
            end if
        inc($x)
        end while
        message("")


        {Check found groups for samples, in order to get final RR counts for each group type}
        {reset uses_dynamic_groups for new count}
        $x := 1
        while ($x < $num_of_techniques+1)
            %uses_dynamic_groups[$x] := 0
            inc($x)
        end while

        {reset count of dynamic groups WITH SAMPLES}
        $x := 1
        while ($x < $max_techniques * $max_dynamics)
            %tech_uses_dyn_group [$x] := 0
            %tech_used_dynamics  [$x] := 0
            %first_used_dyn_group[$x] := 0
            %last_used_dyn_group [$x] := 0
            inc($x)
        end while

        $x := 1 {Dynamic_groups_code <-- don't remove this note, CTRL+F the term to see why}
        while ($x < $num_of_techniques+1)
            $y := 1
            if ((get_group_par(%technique_ppp[$x],3)) > 0)
                inc(%tech_used_dynamics[$x])
                %uses_dynamic_groups[$x] := 1
                %tech_uses_dyn_group[$x+0] := 1
                %tech_dyn_group_index[($x*$max_dynamics)+$y] := %technique_ppp[$x]
                inc($y)
                if (%first_used_dyn_group[$x] = 0)
                    %first_used_dyn_group[$x] := %technique_ppp[$x]
                end if
                %last_used_dyn_group[$x] := %technique_ppp[$x]
            end if
            if ((get_group_par(%technique_pp[$x],3)) > 0)
                inc(%tech_used_dynamics[$x])
                %uses_dynamic_groups[$x] := 1
                %tech_uses_dyn_group[$x+1] := 1
                %tech_dyn_group_index[($x*$max_dynamics)+$y] := %technique_pp[$x]
                inc($y)
                if (%first_used_dyn_group[$x] = 0)
                    %first_used_dyn_group[$x] := %technique_pp[$x]
                end if
                %last_used_dyn_group[$x] := %technique_pp[$x]
            end if
            if ((get_group_par(%technique_p[$x],3)) > 0)
                inc(%tech_used_dynamics[$x])
                %uses_dynamic_groups[$x] := 1
                %tech_uses_dyn_group[$x+2] := 1
                %tech_dyn_group_index[($x*$max_dynamics)+$y] := %technique_p[$x]
                inc($y)
                if (%first_used_dyn_group[$x] = 0)
                    %first_used_dyn_group[$x] := %technique_p[$x]
                end if
                %last_used_dyn_group[$x] := %technique_p[$x]
            end if
            if ((get_group_par(%technique_mp[$x],3)) > 0)
                inc(%tech_used_dynamics[$x])
                %uses_dynamic_groups[$x] := 1
                %tech_uses_dyn_group[$x+3] := 1
                %tech_dyn_group_index[($x*$max_dynamics)+$y] := %technique_mp[$x]
                inc($y)
                if (%first_used_dyn_group[$x] = 0)
                    %first_used_dyn_group[$x] := %technique_mp[$x]
                end if
                %last_used_dyn_group[$x] := %technique_mp[$x]
            end if
            if ((get_group_par(%technique_mf[$x],3)) > 0)
                inc(%tech_used_dynamics[$x])
                %uses_dynamic_groups[$x] := 1
                %tech_uses_dyn_group[$x+4] := 1
                %tech_dyn_group_index[($x*$max_dynamics)+$y] := %technique_mf[$x]
                inc($y)
                if (%first_used_dyn_group[$x] = 0)
                    %first_used_dyn_group[$x] := %technique_mf[$x]
                end if
                %last_used_dyn_group[$x] := %technique_mf[$x]
            end if
            if ((get_group_par(%technique_f[$x],3)) > 0)
                inc(%tech_used_dynamics[$x])
                %uses_dynamic_groups[$x] := 1
                %tech_uses_dyn_group[$x+5] := 1
                %tech_dyn_group_index[($x*$max_dynamics)+$y] := %technique_f[$x]
                inc($y)
                if (%first_used_dyn_group[$x] = 0)
                    %first_used_dyn_group[$x] := %technique_f[$x]
                end if
                %last_used_dyn_group[$x] := %technique_f[$x]
            end if
            if ((get_group_par(%technique_ff[$x],3)) > 0)
                inc(%tech_used_dynamics[$x])
                %uses_dynamic_groups[$x] := 1
                %tech_uses_dyn_group[$x+6] := 1
                %tech_dyn_group_index[($x*$max_dynamics)+$y] := %technique_ff[$x]
                inc($y)
                if (%first_used_dyn_group[$x] = 0)
                    %first_used_dyn_group[$x] := %technique_ff[$x]
                end if
                %last_used_dyn_group[$x] := %technique_ff[$x]
            end if
            if ((get_group_par(%technique_fff[$x],3)) > 0)
                inc(%tech_used_dynamics[$x])
                %uses_dynamic_groups[$x] := 1
                %tech_uses_dyn_group[$x+7] := 1
                %tech_dyn_group_index[($x*$max_dynamics)+$y] := %technique_fff[$x]
                inc($y)
                if (%first_used_dyn_group[$x] = 0)
                    %first_used_dyn_group[$x] := %technique_fff[$x]
                end if
                %last_used_dyn_group[$x] := %technique_fff[$x]
            end if
            inc($x)
        end while
        {RR, RLS, LEGATO...}
        $x := 1
        while ($x < $num_of_techniques+1)
            $y := 1
            while ($y < %technique_rr_groups[$x]+1)
                if ((get_group_par(%technique_rr1_group[$x]+$y-1, 3)) > 0)
                    %rr_samples_found[$x] := $y
                end if
                inc($y)
            end while
            inc($x)
        end while
        $x := 1
        while ($x < $num_of_techniques+1)
            $y := 1
            while ($y < %technique_rls_groups[$x]+1)
                if ((get_group_par(%technique_rls1_group[$x]+$y-1, 3)) > 0)
                    %rls_samples_found[$x] := $y
                end if
                inc($y)
            end while
            inc($x)
        end while
        $x := 1
        while ($x < $num_of_techniques+1)
            $y := 1
            while ($y < %technique_up_groups[$x]+1)
                if ((get_group_par(%technique_up1_group[$x]+$y-1, 3)) > 0)
                    %up_samples_found[$x] := $y
                end if
                inc($y)
            end while
            inc($x)
        end while
        $x := 1
        while ($x < $num_of_techniques+1)
            $y := 1
            while ($y < %technique_dn_groups[$x]+1)
                if ((get_group_par(%technique_dn1_group[$x]+$y-1, 3)) > 0)
                    %dn_samples_found[$x] := $y
                end if
                inc($y)
            end while
            inc($x)
        end while

        {Apply detected RR# to Android lookup forumla ((tech_RRs * MaxArray) + rr#)}
        $x := 1
        while ($x < $num_of_techniques + 1)
            %android_reset_num[$x] := %android_array_size[%rr_samples_found[$x]]
            inc($x)
        end while

        {HIDE UNUSABLE MENU ITEMS}
        if ($menu_mode = 1)
            $x := 1
            while ($x < $max_techniques + 1)
                if (%technique[$x+1] # 0)
                    if (%last_used_dyn_group[$x] = 0) {If tech has no dynamic groups, hide from X-Fade menu, and so on...}
                        set_menu_item_visibility (get_ui_id($xf_menu),  $x, 1)
                    end if
                    if (%rr_samples_found[$x] = 0)
                        set_menu_item_visibility (get_ui_id($rr_menu),       $x, 1)
                    end if
                    if (%rls_samples_found[$x] = 0)
                        set_menu_item_visibility (get_ui_id($rls_menu),      $x, 1)
                    end if
                    if (%up_samples_found[$x] = 0 and %dn_samples_found[$x] = 0)
                        set_menu_item_visibility (get_ui_id($slur_slow_menu),      $x, 1)
                        set_menu_item_visibility (get_ui_id($slur_moderate_menu),  $x, 1)
                        set_menu_item_visibility (get_ui_id($slur_fast_menu),      $x, 1)
                        set_menu_item_visibility (get_ui_id($slur_fast2_menu),     $x, 1)
                    end if
                end if
                inc($x)
            end while
        else
            $x := 1
            while ($x < $max_techniques + 1)
                if (%last_used_dyn_group[$x] = 0) {If tech has no dynamic groups, hide from X-Fade menu, and so on...}
                    set_menu_item_visibility (get_ui_id($xf_menu),  $x, 0)
                end if
                if (%rr_samples_found[$x] = 0)
                    set_menu_item_visibility (get_ui_id($rr_menu),       $x, 0)
                end if
                if (%rls_samples_found[$x] = 0)
                    set_menu_item_visibility (get_ui_id($rls_menu),      $x, 0)
                end if
                if (%up_samples_found[$x] = 0 and %dn_samples_found[$x] = 0)
                    set_menu_item_visibility (get_ui_id($slur_slow_menu),      $x, 0)
                    set_menu_item_visibility (get_ui_id($slur_moderate_menu),  $x, 0)
                    set_menu_item_visibility (get_ui_id($slur_fast_menu),      $x, 0)
                    set_menu_item_visibility (get_ui_id($slur_fast2_menu),     $x, 0)
                end if
                inc($x)
            end while
        end if

        $active_technique := 1
        $last_technique := $active_technique
        $cards_in_deck := %technique_rr_groups[$active_technique]
    end function

    {#####################################################################################}

function find_key_range
    {AUDITION KEYS FOR PLAYBACK}
    $z := 1
    $x := 0
    $y := 128
    while ($x < $y)
        %temp_note_IDs[$x] := play_note($x,4,0,2)
        {DISABLE PLAYBACK}
        change_vol(%temp_note_IDs[$x],-200000,0)
        set_event_par_arr(%temp_note_IDs[$x],$EVENT_PAR_ALLOW_GROUP,0,$ALL_GROUPS)
        {ALLOW FIRST RR GROUP FOR KEYRANGE TECHNIQUE}
        set_event_par_arr(%temp_note_IDs[$x],$EVENT_PAR_ALLOW_GROUP,1,%technique_rr1_group[$KeyRangeTech])
        {ALLOW DYNAMIC GROUPS FOR KEYRANGE TECHNIQUE}
        $i := %first_used_dyn_group[$KeyRangeTech]
        $n := %last_used_dyn_group [$KeyRangeTech]
        while ($i < $n+1)
            set_event_par_arr(%temp_note_IDs[$x],$EVENT_PAR_ALLOW_GROUP,1,$i)
            inc($i)
        end while
        inc($x)
    end while
    {CONVERT PLAYED ID'S TO ZONE ID'S}
    wait (2)
    $x := 0
    while ($x < 128)
        %temp_zone_IDs[$x] := get_event_par(%temp_note_IDs[$x],$EVENT_PAR_ZONE_ID)
        inc($x)
    end while
    {READ RANGE & STORE LOW & HIGH KEYS}
    $x := 0
    $lowest_key  := -1
    $highest_key := -1
    while ($x < 128)
        if (%temp_zone_IDs[$x] > 0)
            if ($lowest_key # -1)
                $highest_key := $x
            end if
            if ($lowest_key = -1)
                $lowest_key := $x
            end if
        end if
        inc($x)
    end while
end function

{#####################################################################################}
{ --------------------------------- FUNCTIONS: UI ----------------------------------- }
{#####################################################################################}

        function refresh_tech_settings
            $current_dynamic_number       := %tech_used_dynamics[$active_technique]
            $current_xfade_dynamic_number := %tech_used_dynamics[%use_tech_xfade[$active_technique]]

            $xf_menu             :=  %use_tech_xfade     [$technique_menu]
            $rr_menu             :=  %use_rr             [$technique_menu]
            $rls_menu            :=  %use_rls            [$technique_menu]
            $slur_slow_menu      :=  %slur_slow          [$technique_menu]
            $slur_moderate_menu  :=  %slur_moderate      [$technique_menu]
            $slur_fast_menu      :=  %slur_fast          [$technique_menu]
            $slur_fast2_menu     :=  %slur_fast2         [$technique_menu]
            $rr_mode_menu        :=  %rr_mode            [$technique_menu]
            $ModVel_mode         :=  %copy_cc1_mode      [$technique_menu]
            $uses_filters        :=  %tech_uses_filters  [$technique_menu]

            {If menu is same as technique, display nothing (less error-prone & easier to read the page)}
            if ($xf_menu = $technique_menu)
                $xf_menu := 0
            end if
            if ($rr_menu = $technique_menu)
                $rr_menu := 0
            end if
            if ($rls_menu = $technique_menu)
                $rls_menu := 0
            end if
            if ($slur_slow_menu = $technique_menu)
                $slur_slow_menu := 0
            end if
            if ($slur_moderate_menu = $technique_menu)
                $slur_moderate_menu := 0
            end if
            if ($slur_fast_menu = $technique_menu)
                $slur_fast_menu := 0
            end if
            if ($slur_fast2_menu = $technique_menu)
                $slur_fast2_menu := 0
            end if

            {Update technique display}
            if ($percussion_mode = 0)
                set_control_par_str(get_ui_id($playing), $CONTROL_PAR_TEXT, !technique_name[$active_technique])
                if ($num_of_techniques = 1)
                    set_control_par_str(get_ui_id($tech_display),  $CONTROL_PAR_TEXT,  $num_of_techniques & "  Technique")
                else
                    set_control_par_str(get_ui_id($tech_display),  $CONTROL_PAR_TEXT,  $num_of_techniques & "  Techniques")
                end if
            else
                if ($num_of_techniques = 1)
                    set_control_par_str(get_ui_id($tech_display),  $CONTROL_PAR_TEXT,  $num_of_techniques & "  Instr/Tech")
                else
                    set_control_par_str(get_ui_id($tech_display),  $CONTROL_PAR_TEXT,  $num_of_techniques & "  Instr/Techs")
                end if
            end if

            message("")
        end function

    {#####################################################################################}

    function load_steps
        set_table_steps_shown(%StepTable,$STEPS)
        { LOAD TABLE VALUES }
        $x := 0
        $y := $max_steps
        while ($x < $y)
            %StepTable[$x]  :=  %stepstorage[($play_menu * $max_steps) + $x]
            inc($x)
        end while
        $play_slider := %StepTable[0]

        { DEFAULT VALUE TO JUMP TO ON CTRL-CLICK }
        { play_menu: Vol=1  Vel=2  Pan=3  Tune=4  Pitch=5  SampleStart=6  Stretch=7  HPfilter=8  LPfilter=9 }
        select ($play_menu)
            case 1 to 2
                set_control_par(get_ui_id($play_slider),  $CONTROL_PAR_DEFAULT_VALUE,$default_volume)
            case 3 to 7
                set_control_par(get_ui_id($play_slider),  $CONTROL_PAR_DEFAULT_VALUE,$half)
            case 8
                set_control_par(get_ui_id($play_slider),  $CONTROL_PAR_DEFAULT_VALUE,$default_LP)
            case 9
                set_control_par(get_ui_id($play_slider),  $CONTROL_PAR_DEFAULT_VALUE,$default_HP)
            case 10 to 26
                set_control_par(get_ui_id($play_slider),  $CONTROL_PAR_DEFAULT_VALUE,$default_volume)
        end select
        if ($play_menu > 26)
                set_control_par(get_ui_id($play_slider),  $CONTROL_PAR_DEFAULT_VALUE,$default_volume)
        end if
    end function

    {#####################################################################################}

    function save_steps
        $x := 0
        $y := $max_steps
        while ($x < $y)
            %stepstorage[($play_menu * $max_steps) + $x] := %StepTable[$x]
            inc($x)
        end while
    end function

    function draw_mode_autosaver
        if ($draw_mode = 1) {see note on $draw_mode ui_control callback}
            call save_steps()
            $draw_mode := 0
        end if
    end function

    {#####################################################################################}

    function inversesteps
        $x := 0
        while ($x < $STEPS)
            %StepInvertMem[$x] := $1M-%StepTable[$x]
            inc($x)
        end while
        $x := 0
        while ($x < $STEPS)
            %StepTable[$x] := %StepInvertMem[$x]
            inc($x)
        end while
        $x := 0
        while ($x < $STEPS)
            %StepInvertMem[$x] := $1M-%StepScaleMem[$x]
            inc($x)
        end while
        $x := 0
        while ($x < $STEPS)
            %StepScaleMem[$x] := %StepInvertMem[$x]
            inc($x)
        end while
    end function

    {#####################################################################################}

    function retrosteps
        $x := 0
        while ($x < $STEPS)
            %StepInvertMem[$x] := %StepTable[$STEPS-$x-1]
            inc($x)
        end while
        $x := 0
        while ($x < $STEPS)
            %StepTable[$x] := %StepInvertMem[$x]
            inc($x)
        end while
        $x := 0
        while ($x < $STEPS)
            %StepInvertMem[$x] := %StepScaleMem[$STEPS-$x-1]
            inc($x)
        end while
        $x := 0
        while ($x < $STEPS)
            %StepScaleMem[$x] := %StepInvertMem[$x]
            inc($x)
        end while
    end function

    {#####################################################################################}

    function step_number_changes
        set_table_steps_shown(%StepTable,$STEPS)
        message("")
        if ($STEPS # 0 and $Page = 2)
            set_control_par(get_ui_id(%StepTable),$CONTROL_PAR_HIDE,$HIDE_PART_BG)
        else
            set_control_par(get_ui_id(%StepTable),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
        end if
        if ($STEPS = 0)
            set_control_par(get_ui_id($play_slider),$CONTROL_PAR_VALUE,%play_menu_value[$play_menu])
            {Time Stretch Pro}
            $x := 1
            while ($x < $NUM_GROUPS)
                set_engine_par($ENGINE_PAR_SPEED, %play_menu_value[7],  $x, -1, -1)
                inc($x)
            end while
            {HP & LP Filters}
            set_engine_par($ENGINE_PAR_CUTOFF, %play_menu_value[8],  -1,4,1)
            set_engine_par($ENGINE_PAR_CUTOFF, %play_menu_value[9],  -1,5,1)
            {Return all groups to default volume}
            $x := 1
            while ($x < $NUM_GROUPS)
                set_engine_par($ENGINE_PAR_VOLUME,$default_volume,$x,0,-1)
                inc($x)
            end while
        end if
    end function

{#####################################################################################}
{ ----------- PLAYBACK FUNCTIONS - PLAYBACK FUNCTIONS - PLAYBACK FUNCTIONS ---------- }
{#####################################################################################}

    function crossfade_translator
        {ACTIVE TECHNIQUE DYNAMIC CROSSFADE}
        if (%uses_dynamic_groups[$active_technique] = 1 and $current_dynamic_number > 1) {If XFade-able}
            $x := 1
            while ($x < $current_dynamic_number + 1)
                {convert CC to XF and invert to use with mod intensity slider}
                select ($x)
                    case 1
                        $y := (%XF_1[%CC[1]] * -1) + 128
                    case 2
                        $y := (%XF_2[%CC[1]] * -1) + 128 
                    case 3
                        $y := (%XF_3[%CC[1]] * -1) + 128 
                    case 4
                        $y := (%XF_4[%CC[1]] * -1) + 128 
                    case 5
                        $y := (%XF_5[%CC[1]] * -1) + 128 
                    case 6
                        $y := (%XF_6[%CC[1]] * -1) + 128 
                    case 7
                        $y := (%XF_7[%CC[1]] * -1) + 128 
                    case 8
                        $y := (%XF_8[%CC[1]] * -1) + 128 
                end select
                $y := real_to_int(int_to_real($y) * 7812.5)
                {Set slider to the correct dynamic group}
                $group := %tech_dyn_group_index[($active_technique * $max_dynamics) + $x]
                set_engine_par($ENGINE_PAR_MOD_TARGET_INTENSITY, $y, $group,find_mod( $group, "TAB_DYNAMICS"),-1)
                inc($x)
            end while
        end if
        {XFADE DYNAMIC CROSSFADE}
        {Tech-to-tech xfade crossfade found in binary_translator function, this is just the dynamic XF, ppp-fff, of the x-fade technique}
        if (%use_tech_xfade[$active_technique] # 0 and %use_tech_xfade[$active_technique] # $active_technique) {If Tech-to-Tech XFADE is enabled}
            if (%uses_dynamic_groups[%use_tech_xfade[$active_technique]] = 1 and $current_xfade_dynamic_number > 1) {If XFade-able}
                $x := 1
                while ($x < $current_xfade_dynamic_number + 1)
                    {convert CC to XF and invert to use with mod intensity slider}
                    select ($x)
                        case 1
                            $y := (%XF_1[%CC[1]] * -1) + 128
                        case 2
                            $y := (%XF_2[%CC[1]] * -1) + 128 
                        case 3
                            $y := (%XF_3[%CC[1]] * -1) + 128 
                        case 4
                            $y := (%XF_4[%CC[1]] * -1) + 128 
                        case 5
                            $y := (%XF_5[%CC[1]] * -1) + 128 
                        case 6
                            $y := (%XF_6[%CC[1]] * -1) + 128 
                        case 7
                            $y := (%XF_7[%CC[1]] * -1) + 128 
                        case 8
                            $y := (%XF_8[%CC[1]] * -1) + 128 
                    end select
                    $y := real_to_int(int_to_real($y) * 7812.5)
                    {Set slider to the correct dynamic group}
                    $group := %tech_dyn_group_index[(%use_tech_xfade[$active_technique] * $max_dynamics) + $x]
                    set_engine_par($ENGINE_PAR_MOD_TARGET_INTENSITY, $y, $group,find_mod( $group, "TAB_DYNAMICS"),-1)
                    inc($x)
                end while
            end if
        end if
    end function

    {#####################################################################################}

    function binary_translator
        if ($percussion_mode = 0)
            {The overly complicated math allows using a custom xfade curve while also forcing 0/100 (so only one tech is heard)...
            with smoothed values toward 0 and 100. This way it's customizable, but as musical as possible... unless a low enough curve is set where
            two signals are intentionally set to have an excessive overlap (see binary_crossfade function for IF statement for xf_curve).}

            if (%use_tech_xfade[$active_technique] # 0 and %use_tech_xfade[$active_technique] # $active_technique) {If Tech-to-Tech XFADE is enabled}
                {ACTIVE TECHNIQUE}
                    $group := %first_used_dyn_group[$active_technique]
                    $SIZE := %last_used_dyn_group[$active_technique]+1
                    $y := %XF_binary[$last_xfade_cc_value]
                    ~z := (((int_to_real($y)/127.0)*100.0) * -1.0) + 100.0 {inverse percentage}
                    if (~z < 100.0) {math explained in note on second while loop}
                        ~z := ((int_to_real($y)/127.0) * (100.0 - (((int_to_real($y) * -1.0) + 127.0)/1.25)) * -1.0) + 100.0
                    end if
                    if (~z < 1.0)
                        ~z := 0.0
                    end if
                    $y := real_to_int (100000.0 * pow(~z, 0.5))
                    while ($group < $SIZE)
                        set_engine_par($ENGINE_PAR_MOD_TARGET_INTENSITY, $y, $group,find_mod( $group, "TAB_TECHNIQUE_XF_A"),-1)
                        inc($group)
                    end while
                {XFADE TECHNIQUE}
                    $group := %first_used_dyn_group[%use_tech_xfade[$active_technique]]
                    $SIZE := %last_used_dyn_group[%use_tech_xfade[$active_technique]]+1
                    $y := %XF_binary[$last_xfade_cc_value]
                    ~z := (int_to_real($y)/127.0)*100.0 {percentage}
                    if (~z < 100.0) {A forced 0 value in the XF_binary array (see binary_crossfade function) allows 1 audible technique if set to 100 or 0}
                        ~z := (int_to_real($y)/127.0) * (100.0 - (((int_to_real($y) * -1.0) + 127.0)/1.25)) {shrinks % more as it lowers, so top and bottom smooth to 100/0}
                    end if
                    if (~z < 1.0)
                        ~z := 0.0
                    end if
                    $y := real_to_int (100000.0 * pow(~z, 0.5))
                    while ($group < $SIZE)
                        set_engine_par($ENGINE_PAR_MOD_TARGET_INTENSITY, $y, $group,find_mod( $group, "TAB_TECHNIQUE_XF_A"),-1)
                        inc($group)
                    end while
            else
                {RESET ACTIVE TECHNIQUE IF NOT IN USE}
                    $group := %first_used_dyn_group[$active_technique]
                    $SIZE := %last_used_dyn_group[$active_technique]+1
                    while ($group < $SIZE)
                        set_engine_par($ENGINE_PAR_MOD_TARGET_INTENSITY, 0, $group,find_mod( $group, "TAB_TECHNIQUE_XF_A"),-1)
                        inc($group)
                    end while
            end if
        end if
        if ($percussion_mode = 1) {Disable for all groups}
            $x := 1
            while ($x < $NUM_GROUPS)
                set_engine_par($ENGINE_PAR_MOD_TARGET_INTENSITY, 0, $x,find_mod( $x, "TAB_TECHNIQUE_XF_A"),-1)
                inc($x)
            end while
        end if
    end function

    {#####################################################################################}

    function dealer
        {Record snapshot of the currently used shuffle into history}
        $x := 1
        while($x < $cards_in_deck+1)
            %last_shuffle[$x] := %new_shuffle[$x]
            inc($x)
        end while
        {Shuffle the deck}
        $x := 1
        while($x < $cards_in_deck+1)
            $z := random(1, $cards_in_deck)
            $y := %new_shuffle[$x]
            %new_shuffle[$x] := %new_shuffle[$z]
            %new_shuffle[$z] := $y
            inc($x)
        end while
        {Take a snapshot of new deck}
        $x := 1
        while($x < $cards_in_deck+1)
            %deck_to_play[$x] := %new_shuffle[$x]
            inc($x)
        end while
        {If repeat is found from last card of old shuffle to first card in new shuffle...}
        if (%new_shuffle[1] = %last_shuffle[$cards_in_deck])
            $x := %deck_to_play[1] {Swap the new deck's first and last card}
            %deck_to_play[1] := %new_shuffle[$cards_in_deck]
            %deck_to_play[$cards_in_deck] := $x
        end if
        $card := 1
    end function

    {#####################################################################################}

    function round_robin_clock
        if ($percussion_mode = 0)
            if (%rr_mode[$active_technique] = 1)
                $cards_in_deck := %rr_samples_found[%use_rls[$active_technique]]
                if (not in_range($card,1,$cards_in_deck))
                    call dealer
                end if
                $round_robin := %deck_to_play[$card]-1
            end if
            {-------}
            if (not in_range($android_clock,1,%android_reset_num[$active_technique]-1))
                $android_clock := 1
            end if
            if (%rr_mode[$active_technique] = 2)
                $round_robin := %android_matrix[%rr_samples_found[%use_rr[$active_technique]] * num_elements(%android_34) + $android_clock]-1
            end if
            {-------}
            if (not in_range($cycle_mode_rr,1, %rr_samples_found[%use_rr[$active_technique]]))
                $cycle_mode_rr := 1
            end if
            if (%rr_mode[$active_technique] = 3)
                $round_robin := $cycle_mode_rr-1
            end if
        else {PERCUSSION MODE}
            if (not in_range(%perc_android_clock[$note-$key_offset],1,%android_reset_num[$note-$key_offset]-1))
                %perc_android_clock [$note-$key_offset] := 1
            end if
            if (%rr_mode[$note-$key_offset] = 2) {(RRs * ArrayMAX) + RRcounter}
                $x := %android_matrix[(%rr_samples_found[$note-$key_offset] * num_elements(%android_34)) + %perc_android_clock [$note-$key_offset]]-1
                %perc_note_rr[$note-$key_offset] := $x
            end if
            {-------}
            if (not in_range(%perc_cycle_mode_rr [$note-$key_offset],1, %rr_samples_found[$note-$key_offset]))
                %perc_cycle_mode_rr [$note-$key_offset] := 1
            end if
            if (%rr_mode[$active_technique] = 3)
                %perc_note_rr[$note-$key_offset] := %perc_cycle_mode_rr [$note-$key_offset]-1
            end if
        end if
    end function

    {#####################################################################################}

    function humanize
        if ($humanize > $humanize_range) {If value is greater than square root}
            $100_percent := $humanize / $humanize_range
            while ($vel + $100_percent > 127) {If humanize goes above 127 velocity, shrink range to fit and maintain humanization}
                dec($100_percent)
            end while
            $50_percent  := $100_percent / 2
            $75_percent  := $50_percent + ($50_percent/2)
            $63_percent  := $50_percent + ($75_percent-$50_percent)

            {2/2 Time Signature}
            if ($SIGNATURE_NUM = 2 and $SIGNATURE_DENOM = 2)
                if (in_range($note_time, 0, $bias)) {1st downbeat}
                    $humanize_adds := $100_percent
                end if
            end if

            {3/4 Time Signature}
            if ($SIGNATURE_NUM = 3 and $SIGNATURE_DENOM = 4)
                if (in_range($note_time, 0, $bias)) {1st downbeat}
                    $humanize_adds := $100_percent
                end if
                if (in_range($note_time, $quarter-$bias,$quarter+$bias))
                    $humanize_adds := $50_percent
                end if
                if (in_range($note_time, ($quarter*3)-$bias, ($quarter*3)+$bias))
                    $humanize_adds := $75_percent
                end if
            end if

            {4/4 Time Signature}
            if ($SIGNATURE_NUM = 4 and $SIGNATURE_DENOM = 4)
                if (in_range($note_time, 0, $bias)) {1st downbeat}
                    $humanize_adds := $100_percent
                end if
                if (in_range($note_time, $quarter-$bias,$quarter+$bias))
                    $humanize_adds := $50_percent
                end if
                if (in_range($note_time, ($quarter*2)-$bias, ($quarter*2)+$bias))
                    $humanize_adds := $75_percent
                end if
                if (in_range($note_time, ($quarter*3)-$bias, ($quarter*3)+$bias))
                    $humanize_adds := $63_percent
                end if
            end if

            {6/8 Time Signature}
            if ($SIGNATURE_NUM = 6 and $SIGNATURE_DENOM = 8)
                if (in_range($note_time, 0, $bias)) {1st downbeat}
                    $humanize_adds := $100_percent
                end if
                if (in_range($note_time, ($8th_note*4)-$bias, ($8th_note*4)+$bias))
                    $humanize_adds := $75_percent
                end if
            end if

            {9/8 Time Signature}
            if ($SIGNATURE_NUM = 9 and $SIGNATURE_DENOM = 8)
                if (in_range($note_time, 0, $bias)) {1st downbeat}
                    $humanize_adds := $100_percent
                end if
                if (in_range($note_time, ($8th_note*4)-$bias, ($8th_note*4)+$bias))
                    $humanize_adds := $50_percent
                end if
                if (in_range($note_time, ($8th_note*7)-$bias, ($8th_note*7)+$bias))
                    $humanize_adds := $75_percent
                end if
            end if

            {12/8 Time Signature}
            if ($SIGNATURE_NUM = 12 and $SIGNATURE_DENOM = 8)
                if (in_range($note_time, 0, $bias)) {1st downbeat}
                    $humanize_adds := $100_percent
                end if
                if (in_range($note_time, ($8th_note*4)-$bias, ($8th_note*4)+$bias))
                    $humanize_adds := $50_percent
                end if
                if (in_range($note_time, ($8th_note*7)-$bias, ($8th_note*7)+$bias))
                    $humanize_adds := $75_percent
                end if
                if (in_range($note_time, ($8th_note*10)-$bias, ($8th_note*10)+$bias))
                    $humanize_adds := $63_percent
                end if
            end if
            {HUMANIZED VELOCITY}
            $vel  := $vel + $humanize_adds
        end if
    end function

    {#####################################################################################}

    function play_modifier
        call draw_mode_autosaver() {see note on $draw_mode ui_control callback}
        if ($STEPS = 0)
            $vol              :=  (%play_menu_value[1]/25)-25200
            $pan              :=  (%play_menu_value[3]/500)-1000
            $tune             :=  (%play_menu_value[4]/5)-$100K
            $pitch            :=  (%play_menu_value[5]*12/5)-(1200000)
            {Sample Start Offset}
            $i                :=   %play_menu_value[6]/$sMOD_divider
            $sample_offset    :=   $i - ($sMOD_numerator/2)
            $stretch          :=   %play_menu_value[7]
            $HPfilter         :=   %play_menu_value[8]
            $LPfilter         :=   %play_menu_value[9]
        else
            $vol              :=   (%stepstorage[(1*$max_steps)+$step]/25)-25200
            {velocity}
            if ($read_step_velocity = 1) {If velocity is enabled}
                $vel          :=   %stepstorage[(2*$max_steps)+$step]/7874
            end if
            $pan              :=  (%stepstorage[(3*$max_steps)+$step]/500)-1000
            $tune             :=  (%stepstorage[(4*$max_steps)+$step]/5)-$100K
            $pitch            :=  (%stepstorage[(5*$max_steps)+$step]*12/5)-(1200000)
            {Sample Start Offset}
            $i                :=   %stepstorage[(2*$max_steps)+$step]/$sMOD_divider
            $sample_offset    :=   $i - ($sMOD_numerator/2)
            $stretch          :=   %stepstorage[(7*$max_steps)+$step]
            $HPfilter         :=   %stepstorage[(8*$max_steps)+$step]
            $LPfilter         :=   %stepstorage[(9*$max_steps)+$step]
        end if
        %note_vol     [$note] := $vol
        %note_vel     [$note] := $vel
        %note_pan     [$note] := $pan
        %note_tune    [$note] := $tune
        %note_pitch   [$note] := $pitch
        %note_stretch [$note] := $stretch
        {Due to rounding}
        if ($vel > 127)
            $vel := 127
        end if

        if ($STEPS # 0)
            {Apply PLAY STEP Mic values to dynamic groups... can be disabled by ALT clicking Play tab}
            if ($step_mic_rr_only # 1)
                if ($percussion_mode = 0)
                    $x := %first_used_dyn_group[$active_technique]
                    $y := %last_used_dyn_group [$active_technique]
                else
                    $x := %first_used_dyn_group[$note-$key_offset]
                    $y := %last_used_dyn_group [$note-$key_offset]
                end if
                $mic_num := 1
                while ($mic_num < $num_of_mics + 1)
                    while ($x < $y+1)
                        $group := %mic[$mic_num] + $x
                        set_engine_par($ENGINE_PAR_VOLUME,((%stepstorage[((9+$mic_num)*$max_steps)+$step]*7)/10)+280000,$group,0,-1)
                        inc($x)
                    end while    
                    inc($mic_num)
                end while
            end if

            {PLAY STEP Mic values applied to just the Round Robin in use}
            $mic_num := 1
            while ($mic_num < $num_of_mics + 1)
                if ($percussion_mode = 0)
                    if (%use_rr[$active_technique] = $active_technique or %use_rr[$active_technique] = 0)
                        $group := %mic[$mic_num] + %technique_rr1_group  [$active_technique] + $round_robin
                    else
                        $group := %mic[$mic_num] + %technique_rr1_group  [%use_rr[$active_technique]] + $round_robin
                    end if
                else
                    $group := %mic[$mic_num] + %technique_rr1_group  [$active_technique] + %perc_note_rr[$note-$key_offset]
                end if
                set_engine_par($ENGINE_PAR_VOLUME,((%stepstorage[((9+$mic_num)*$max_steps)+$step]*7)/10)+280000,$group,0,-1)
                inc($mic_num)
            end while
        end if
    end function

    {#####################################################################################}

    function note_filters
        if ($percussion_mode = 0)
            {Mic/RR code w/ set_engine instead of allow_group}
            $x := 1
            while ($x < $num_of_mics+1)
                $group := %mic[$x] + %technique_ppp [$active_technique]  {Dynamic_groups_code <-- don't remove this note, CTRL+F the term to see why}
                    set_engine_par ($ENGINE_PAR_CUTOFF,  $HPfilter,  $group,  $HP_filter_slot,  $filter_generic)
                    set_engine_par ($ENGINE_PAR_CUTOFF,  $LPfilter,  $group,  $LP_filter_slot,  $filter_generic)
                $group := %mic[$x] + %technique_pp [$active_technique]
                    set_engine_par ($ENGINE_PAR_CUTOFF,  $HPfilter,  $group,  $HP_filter_slot,  $filter_generic)
                    set_engine_par ($ENGINE_PAR_CUTOFF,  $LPfilter,  $group,  $LP_filter_slot,  $filter_generic)
                $group := %mic[$x] + %technique_p  [$active_technique]
                    set_engine_par ($ENGINE_PAR_CUTOFF,  $HPfilter,  $group,  $HP_filter_slot,  $filter_generic)
                    set_engine_par ($ENGINE_PAR_CUTOFF,  $LPfilter,  $group,  $LP_filter_slot,  $filter_generic)
                $group := %mic[$x] + %technique_mp [$active_technique]
                    set_engine_par ($ENGINE_PAR_CUTOFF,  $HPfilter,  $group,  $HP_filter_slot,  $filter_generic)
                    set_engine_par ($ENGINE_PAR_CUTOFF,  $LPfilter,  $group,  $LP_filter_slot,  $filter_generic)
                $group := %mic[$x] + %technique_mf [$active_technique]
                    set_engine_par ($ENGINE_PAR_CUTOFF,  $HPfilter,  $group,  $HP_filter_slot,  $filter_generic)
                    set_engine_par ($ENGINE_PAR_CUTOFF,  $LPfilter,  $group,  $LP_filter_slot,  $filter_generic)
                $group := %mic[$x] + %technique_f  [$active_technique]
                    set_engine_par ($ENGINE_PAR_CUTOFF,  $HPfilter,  $group,  $HP_filter_slot,  $filter_generic)
                    set_engine_par ($ENGINE_PAR_CUTOFF,  $LPfilter,  $group,  $LP_filter_slot,  $filter_generic)
                $group := %mic[$x] + %technique_fff [$active_technique]
                    set_engine_par ($ENGINE_PAR_CUTOFF,  $HPfilter,  $group,  $HP_filter_slot,  $filter_generic)
                    set_engine_par ($ENGINE_PAR_CUTOFF,  $LPfilter,  $group,  $LP_filter_slot,  $filter_generic)

                if (%use_rr[$active_technique] = $active_technique or %use_rr[$active_technique] = 0)
                    $group := %mic[$x] + %technique_rr1_group  [$active_technique] + $round_robin
                        set_engine_par ($ENGINE_PAR_CUTOFF,  $HPfilter,  $group,  $HP_filter_slot,  $filter_generic)
                        set_engine_par ($ENGINE_PAR_CUTOFF,  $LPfilter,  $group,  $LP_filter_slot,  $filter_generic)
                else
                    $group := %mic[$x] + %technique_rr1_group  [%use_rr[$active_technique]] + $round_robin
                        set_engine_par ($ENGINE_PAR_CUTOFF,  $HPfilter,  $group,  $HP_filter_slot,  $filter_generic)
                        set_engine_par ($ENGINE_PAR_CUTOFF,  $LPfilter,  $group,  $LP_filter_slot,  $filter_generic)
                end if

                if (%use_tech_xfade[$active_technique] # 0 and %use_tech_xfade[$active_technique] # $active_technique) {Dynamic_groups_code <-- don't remove this note, CTRL+F the term to see why}
                    $group := %mic[$x] + %technique_ppp [%uses_dynamic_groups[$active_technique]]
                        set_engine_par ($ENGINE_PAR_CUTOFF,  $HPfilter,  $group,  $HP_filter_slot,  $filter_generic)
                        set_engine_par ($ENGINE_PAR_CUTOFF,  $LPfilter,  $group,  $LP_filter_slot,  $filter_generic)
                    $group := %mic[$x] + %technique_pp [%uses_dynamic_groups[$active_technique]]
                        set_engine_par ($ENGINE_PAR_CUTOFF,  $HPfilter,  $group,  $HP_filter_slot,  $filter_generic)
                        set_engine_par ($ENGINE_PAR_CUTOFF,  $LPfilter,  $group,  $LP_filter_slot,  $filter_generic)
                    $group := %mic[$x] + %technique_p  [%uses_dynamic_groups[$active_technique]]
                        set_engine_par ($ENGINE_PAR_CUTOFF,  $HPfilter,  $group,  $HP_filter_slot,  $filter_generic)
                        set_engine_par ($ENGINE_PAR_CUTOFF,  $LPfilter,  $group,  $LP_filter_slot,  $filter_generic)
                    $group := %mic[$x] + %technique_mp [%uses_dynamic_groups[$active_technique]]
                        set_engine_par ($ENGINE_PAR_CUTOFF,  $HPfilter,  $group,  $HP_filter_slot,  $filter_generic)
                        set_engine_par ($ENGINE_PAR_CUTOFF,  $LPfilter,  $group,  $LP_filter_slot,  $filter_generic)
                    $group := %mic[$x] + %technique_mf [%uses_dynamic_groups[$active_technique]]
                        set_engine_par ($ENGINE_PAR_CUTOFF,  $HPfilter,  $group,  $HP_filter_slot,  $filter_generic)
                        set_engine_par ($ENGINE_PAR_CUTOFF,  $LPfilter,  $group,  $LP_filter_slot,  $filter_generic)
                    $group := %mic[$x] + %technique_f  [%uses_dynamic_groups[$active_technique]]
                        set_engine_par ($ENGINE_PAR_CUTOFF,  $HPfilter,  $group,  $HP_filter_slot,  $filter_generic)
                        set_engine_par ($ENGINE_PAR_CUTOFF,  $LPfilter,  $group,  $LP_filter_slot,  $filter_generic)
                    $group := %mic[$x] + %technique_ff [%uses_dynamic_groups[$active_technique]]
                        set_engine_par ($ENGINE_PAR_CUTOFF,  $HPfilter,  $group,  $HP_filter_slot,  $filter_generic)
                        set_engine_par ($ENGINE_PAR_CUTOFF,  $LPfilter,  $group,  $LP_filter_slot,  $filter_generic)
                    $group := %mic[$x] + %technique_fff [%uses_dynamic_groups[$active_technique]]
                        set_engine_par ($ENGINE_PAR_CUTOFF,  $HPfilter,  $group,  $HP_filter_slot,  $filter_generic)
                        set_engine_par ($ENGINE_PAR_CUTOFF,  $LPfilter,  $group,  $LP_filter_slot,  $filter_generic)
                end if
                inc($x)
            end while
        end if
        if ($percussion_mode = 1)
            $x := 1
            while ($x < $num_of_mics+1)
                $group := %mic[$x] + %technique_ppp [$note-$key_offset]  {Dynamic_groups_code <-- don't remove this note, CTRL+F the term to see why}
                    set_engine_par ($ENGINE_PAR_CUTOFF,  $HPfilter,  $group,  $HP_filter_slot,  $filter_generic)
                    set_engine_par ($ENGINE_PAR_CUTOFF,  $LPfilter,  $group,  $LP_filter_slot,  $filter_generic)
                $group := %mic[$x] + %technique_pp [$note-$key_offset]
                    set_engine_par ($ENGINE_PAR_CUTOFF,  $HPfilter,  $group,  $HP_filter_slot,  $filter_generic)
                    set_engine_par ($ENGINE_PAR_CUTOFF,  $LPfilter,  $group,  $LP_filter_slot,  $filter_generic)
                $group := %mic[$x] + %technique_p  [$note-$key_offset]
                    set_engine_par ($ENGINE_PAR_CUTOFF,  $HPfilter,  $group,  $HP_filter_slot,  $filter_generic)
                    set_engine_par ($ENGINE_PAR_CUTOFF,  $LPfilter,  $group,  $LP_filter_slot,  $filter_generic)
                $group := %mic[$x] + %technique_mp [$note-$key_offset]
                    set_engine_par ($ENGINE_PAR_CUTOFF,  $HPfilter,  $group,  $HP_filter_slot,  $filter_generic)
                    set_engine_par ($ENGINE_PAR_CUTOFF,  $LPfilter,  $group,  $LP_filter_slot,  $filter_generic)
                $group := %mic[$x] + %technique_mf [$note-$key_offset]
                    set_engine_par ($ENGINE_PAR_CUTOFF,  $HPfilter,  $group,  $HP_filter_slot,  $filter_generic)
                    set_engine_par ($ENGINE_PAR_CUTOFF,  $LPfilter,  $group,  $LP_filter_slot,  $filter_generic)
                $group := %mic[$x] + %technique_f  [$note-$key_offset]
                    set_engine_par ($ENGINE_PAR_CUTOFF,  $HPfilter,  $group,  $HP_filter_slot,  $filter_generic)
                    set_engine_par ($ENGINE_PAR_CUTOFF,  $LPfilter,  $group,  $LP_filter_slot,  $filter_generic)
                $group := %mic[$x] + %technique_fff [$note-$key_offset]
                    set_engine_par ($ENGINE_PAR_CUTOFF,  $HPfilter,  $group,  $HP_filter_slot,  $filter_generic)
                    set_engine_par ($ENGINE_PAR_CUTOFF,  $LPfilter,  $group,  $LP_filter_slot,  $filter_generic)


                $group := %mic[$x] + %technique_rr1_group  [$note-$key_offset] + %perc_note_rr[$note-$key_offset]
                    set_engine_par ($ENGINE_PAR_CUTOFF,  $HPfilter,  $group,  $HP_filter_slot,  $filter_generic)
                    set_engine_par ($ENGINE_PAR_CUTOFF,  $LPfilter,  $group,  $LP_filter_slot,  $filter_generic)
                inc($x)
            end while
        end if
    end function

    {#####################################################################################}

    function stretch_samples
        if ($percussion_mode = 0)
            {ID which samples to stretch}
            if ($stretch_mode = 1)  {RR ATTACK ONLY}
                $x := 1
                while ($x < $num_of_mics + 1) {Applies to current RR only, then RLS group, as opposed to looping through all groups}
                    if (%use_rr[$active_technique] = $active_technique or %use_rr[$active_technique] = 0)
                        $group := %mic[$x] + %technique_rr1_group  [$active_technique] + $round_robin
                    else
                        $group := %mic[$x] + %technique_rr1_group  [%use_rr[$active_technique]] + $round_robin
                    end if
                    set_engine_par($ENGINE_PAR_SPEED,  $stretch,  $group, -1, -1)
                    inc($x)
                end while
            end if
            if ($stretch_mode = 0) {ALL GROUPS}
                $x := 1
                $group := %technique[$active_technique]
                while ($x < $num_of_mics + 1)
                    while ($group < %technique[$active_technique+1])
                        set_engine_par($ENGINE_PAR_SPEED,  $stretch, %mic[$x] + $group, -1, -1)
                        inc($group)
                    end while
                    inc($x)
                end while
            end if
        end if
    end function

    {#####################################################################################}

    function mod_dynamics
        { Dynamic Loop VEL = 75% toward current CC1 Value to avoid unwanted SFZ while allowing vel influence }
        if (%uses_dynamic_groups[%note_technique[$note]] = 1) {If Dynamic samples were found in Technique...}
            if ($CC1_value = 0) {CC range: 0-127 .. Vel range: 1-127}
                $CC1_value := 1
            end if
            if (%copy_cc1_mode[$active_technique] = 1) {100% MOD}
                $vel          := $CC1_value
            end if
            if (%copy_cc1_mode[$active_technique] = 2) {40v / 60mod}
                $x := ($vel * 40) / 100
                $y := ($CC1_value * 60) / 100
                $vel := $x + $y
            end if
            $rls_velocity := $CC1_value
        end if
        if ($percussion_mode = 1)
            if (%uses_dynamic_groups[$note-$key_offset] = 1)
                if ($CC1_value = 0) {CC range: 0-127 .. Vel range: 1-127}
                    $CC1_value := 1
                end if
                if (%copy_cc1_mode[$note-$key_offset] = 1) {100% MOD}
                    $vel          := $CC1_value
                end if
                if (%copy_cc1_mode[$note-$key_offset] = 2) {40v / 60mod}
                    $x := ($vel * 40) / 100
                    $y := ($CC1_value * 60) / 100
                    $vel := $x + $y
                end if
                $rls_velocity := $CC1_value
            end if
        end if
        if ($rls_velocity > 127)
            $rls_velocity := 127
        end if
    end function

{#####################################################################################}
{ -- ON NOTE - ON NOTE - ON NOTE - ON NOTE - ON NOTE - ON NOTE - ON NOTE - ON NOTE  - }
{#####################################################################################}

    on note

        { #######  SAVE MIDI, DISABLE PLAYBACK, ID SAMPLES TO USE  ####### }

        $vel                         := $EVENT_VELOCITY
        $note                        := $EVENT_NOTE
        $note_ID                     := $EVENT_ID
        $note_time                   := $DISTANCE_BAR_START {note time}
        $quarter                     := $DURATION_QUARTER
        $8th_note                    := $DURATION_EIGHTH
        %note_technique[$EVENT_NOTE] := $active_technique

        ignore_event    ($EVENT_ID)
        disallow_group  ($ALL_GROUPS)
        call round_robin_clock()

        if ($percussion_mode = 0)
            {SET SAMPLES TO PLAY}
            $x := 1
            while ($x < $num_of_mics+1) {Dynamic_groups_code <-- don't remove this note, CTRL+F the term to see why}
                allow_group(%mic[$x] + %technique_ppp [$active_technique])
                allow_group(%mic[$x] + %technique_pp  [$active_technique])
                allow_group(%mic[$x] + %technique_p   [$active_technique])
                allow_group(%mic[$x] + %technique_mp  [$active_technique])
                allow_group(%mic[$x] + %technique_mf  [$active_technique])
                allow_group(%mic[$x] + %technique_f   [$active_technique])
                allow_group(%mic[$x] + %technique_ff  [$active_technique])
                allow_group(%mic[$x] + %technique_fff [$active_technique])

                if (%use_rr[$active_technique] = $active_technique or %use_rr[$active_technique] = 0)
                    if (%technique_rr1_group  [$active_technique] # 0)
                        allow_group(%mic[$x] + %technique_rr1_group  [$active_technique] + $round_robin)
                    end if
                else
                    if (%technique_rr1_group  [%use_rr[$active_technique]] # 0)
                        allow_group(%mic[$x] + %technique_rr1_group  [%use_rr[$active_technique]] + $round_robin)
                    end if
                end if

                if (%use_tech_xfade[$active_technique] # 0 and %use_tech_xfade[$active_technique] # $active_technique) {Dynamic_groups_code <-- don't remove this note, CTRL+F the term to see why}
                    allow_group(%mic[$x] + %technique_ppp [%use_tech_xfade[$active_technique]])
                    allow_group(%mic[$x] + %technique_pp  [%use_tech_xfade[$active_technique]])
                    allow_group(%mic[$x] + %technique_p   [%use_tech_xfade[$active_technique]])
                    allow_group(%mic[$x] + %technique_mp  [%use_tech_xfade[$active_technique]])
                    allow_group(%mic[$x] + %technique_mf  [%use_tech_xfade[$active_technique]])
                    allow_group(%mic[$x] + %technique_f   [%use_tech_xfade[$active_technique]])
                    allow_group(%mic[$x] + %technique_ff  [%use_tech_xfade[$active_technique]])
                    allow_group(%mic[$x] + %technique_fff [%use_tech_xfade[$active_technique]])
                end if

                if (get_key_type($note) # $NI_KEY_TYPE_CONTROL)




                end if
                inc($x)
            end while
        else
            $x := 1
            while ($x < $num_of_mics+1) {Dynamic_groups_code <-- don't remove this note, CTRL+F the term to see why}
                allow_group(%mic[$x] + %technique_ppp [$note-$key_offset])
                allow_group(%mic[$x] + %technique_pp  [$note-$key_offset])
                allow_group(%mic[$x] + %technique_p   [$note-$key_offset])
                allow_group(%mic[$x] + %technique_mp  [$note-$key_offset])
                allow_group(%mic[$x] + %technique_mf  [$note-$key_offset])
                allow_group(%mic[$x] + %technique_f   [$note-$key_offset])
                allow_group(%mic[$x] + %technique_ff  [$note-$key_offset])
                allow_group(%mic[$x] + %technique_fff [$note-$key_offset])
                if (%technique_rr1_group [$note-$key_offset] # 0)
                    allow_group(%mic[$x] + %technique_rr1_group [$note-$key_offset] + %perc_note_rr[$note-$key_offset])
                end if
                inc($x)
            end while
        end if

        {LEGATO LEGATO LEGATO LEGATO}
        { #######  NOTE MODIFICATIONS  ####### }

        call humanize()
        call mod_dynamics()
        call play_modifier()
        call stretch_samples()
        call note_filters()

        { #######  PLAYBACK  ####### }

        $note_ID := play_note($note, $vel, $sample_offset, -1)
            change_vol     ($note_ID,  $vol    ,1)
            change_pan     ($note_ID,  $pan    ,1) {$1M/500 = 2,000 ... pan range is -1000 to 1000}
            change_tune    ($note_ID,  $tune   ,1) {fine, shrunk to 200K, then minus half for bipolar +/- a semitone}
            change_tune    ($note_ID,  $pitch  ,1) {coarse, expanded to 24,000,000 so +/- 100,000 = +/- up to 12 semitones}

        {STORE & LIMIT ID (one per note)}

            if (event_status(%note_last_ID[$note])= $EVENT_STATUS_NOTE_QUEUE)
            fade_out(%note_last_ID[$note],1000,1)
            end if
            %note_last_ID[$note] := $note_ID

        {STORE RR FOR RELEASE & INCREASE RR #}

            if ($percussion_mode = 0)
                %note_round_robin [$note]  :=  $round_robin
                inc($card)
                inc($android_clock)
                inc($cycle_mode_rr)
            else
                inc(%perc_android_clock [$note-$key_offset])
                inc(%perc_cycle_mode_rr [$note-$key_offset])
            end if

        {UPDATE STEP}
            %note_step[$note]  :=  $step
            if ($STEPS > 0)
                $last_step := $step
                inc($step)
                if (not in_range($step,0,$STEPS-1))
                    $step := 0
                end if
            else
                %note_step[$note] := -1
            end if
    end on

{#####################################################################################}
{ ------------- RELEASE FUNCTION - RELEASE FUNCTION - RELEASE FUNCTION -------------- }
{#####################################################################################}

    function rls_round_robin_clock
        if ($percussion_mode = 0)
            if (not in_range($cycle_mode_rls_rr,1,%rls_samples_found[%use_rls[%note_technique[$rls_note]]]))
                $cycle_mode_rls_rr := 1 {0 for adding the # to the existing group ID}
            end if
            if (not in_range($cycle_mode_rls_rr_XFade,1,%rls_samples_found[%use_rls[%use_tech_xfade[%note_technique[$rls_note]]]]))
                $cycle_mode_rls_rr_XFade := 1
            end if

            if ($rls_rr_matches_attack = 1)
                $rls_round_robin := %note_round_robin[$rls_note]
                {KSP can handle 1 shuffle max for 1 tech, so X-Fade release groups must cycle RR's}
                {That or android mode could be added, but it would be both an obscure setting and a confusing option}
                $xf_rls_round_robin := $cycle_mode_rls_rr_XFade - 1 
            else
                $rls_round_robin    := $cycle_mode_rls_rr - 1
                $xf_rls_round_robin := $cycle_mode_rls_rr_XFade - 1
            end if
        else {PERCUSSION MODE}
            {Already set in on note on a per-key basis, so cycle or android is already set}
        end if
    end function

    {#####################################################################################}

    function rls_note_modifiers
        if ($percussion_mode = 0)
            $x := 1
            while ($x < $num_of_mics+1)
                if (%use_rls[%note_technique[$rls_note]] = %note_technique[$rls_note] or %use_rls[%note_technique[$rls_note]] = 0)
                    $group := %mic[$x] + %technique_rls1_group [%note_technique[$rls_note]] + $rls_round_robin
                        set_engine_par ($ENGINE_PAR_CUTOFF,  $HPfilter,  $group,  $HP_filter_slot,  $filter_generic)
                        set_engine_par ($ENGINE_PAR_CUTOFF,  $LPfilter,  $group,  $LP_filter_slot,  $filter_generic)
                else
                    $group := %mic[$x] + %technique_rls1_group [%use_rls[%note_technique[$rls_note]]] + $xf_rls_round_robin
                        set_engine_par ($ENGINE_PAR_CUTOFF,  $HPfilter,  $group,  $HP_filter_slot,  $filter_generic)
                        set_engine_par ($ENGINE_PAR_CUTOFF,  $LPfilter,  $group,  $LP_filter_slot,  $filter_generic)
                end if
                inc($x)
            end while
            {PLAY STEP Mic values apply (to release samples) if enabled for dynamic loops and active technique has dynamics}
            if ($step_mic_rr_only # 1 and $current_dynamic_number > 0)
                $mic_num := 1
                while ($mic_num < $num_of_mics + 1)
                    $group_mic := %mic[$mic_num]
                    if (%use_rls[$active_technique] = $active_technique or %use_rls[$active_technique] = 0)
                        $group := %mic[$mic_num] + %technique_rls1_group [%note_technique[$rls_note]] + $rls_round_robin
                    else
                        $group := %mic[$mic_num] + %technique_rls1_group [%use_rls[%note_technique[$rls_note]]] + $xf_rls_round_robin
                    end if
                    set_engine_par($ENGINE_PAR_VOLUME,((%stepstorage[((9+$mic_num)*$max_steps)+$last_step]*7)/10)+280000,$group,0,-1)
                    inc($mic_num)
                end while
            end if
        end if
        if ($percussion_mode = 1)
            $x := 1
            while ($x < $num_of_mics+1)
                $group := %mic[$x] + %technique_rls1_group [$rls_note-$key_offset] + %perc_note_rr[$rls_note-$key_offset]
                    set_engine_par ($ENGINE_PAR_CUTOFF,  $HPfilter,  $group,  $HP_filter_slot,  $filter_generic)
                    set_engine_par ($ENGINE_PAR_CUTOFF,  $LPfilter,  $group,  $LP_filter_slot,  $filter_generic)
                inc($x)
            end while
            {PLAY STEP Mic values apply (to release samples) if enabled for dynamic loops}
            if ($step_mic_rr_only # 1)
                $mic_num := 1
                while ($mic_num < $num_of_mics + 1)
                    $group_mic := %mic[$mic_num]
                    $group := %mic[$mic_num] + %technique_rls1_group [$rls_note-$key_offset] + %perc_note_rr[$rls_note-$key_offset]
                    set_engine_par($ENGINE_PAR_VOLUME,((%stepstorage[((9+$mic_num)*$max_steps)+$last_step]*7)/10)+280000,$group,0,-1)
                    inc($mic_num)
                end while
            end if
        end if
    end function

{#####################################################################################}
{ -- RELEASE - RELEASE - RELEASE - RELEASE - RELEASE - RELEASE - RELEASE - RELEASE -- }
{#####################################################################################}

    on release
        disallow_group($ALL_GROUPS)
        $rls_note     := $EVENT_NOTE
        $rls_velocity := %note_vel[$rls_note]

        call rls_round_robin_clock()

        if ($percussion_mode = 0)
            {SET SAMPLES TO PLAY}
            $x := 1
            while ($x < $num_of_mics+1)
                {RLS TECH -vs- USE RLS TECH}
                if (%use_rls[%note_technique[$rls_note]] = %note_technique[$rls_note] or %use_rls[%note_technique[$rls_note]] = 0)
                    if (%technique_rls1_group [%note_technique[$rls_note]] # 0) {extra line to make sure not to allow group 0 (can cause mass group allowing, mass held notes on rls)}
                        allow_group(%mic[$x] + %technique_rls1_group [%note_technique[$rls_note]] + $rls_round_robin)
                    end if
                else
                    if (%technique_rls1_group [%use_rls[%note_technique[$rls_note]]] # 0)
                        allow_group(%mic[$x] + %technique_rls1_group [%use_rls[%note_technique[$rls_note]]] + $rls_round_robin)
                    end if
                end if
                {XFADE RLS}
                if (%use_tech_xfade[$active_technique] # 0 and %use_tech_xfade[$active_technique] # $active_technique)
                    if (%technique_rls1_group [%use_tech_xfade[%note_technique[$rls_note]]] # 0)
                        allow_group(%mic[$x] + %technique_rls1_group [%use_tech_xfade[%note_technique[$rls_note]]] + $xf_rls_round_robin)
                    end if
                end if
                inc($x)
            end while
        else {PERCUSSION MODE}
            $x := 1
            while ($x < $num_of_mics+1)
                if (%technique_rls1_group [$rls_note-$key_offset] # 0)
                    allow_group(%mic[$x] + %technique_rls1_group [$rls_note-$key_offset] + %perc_note_rr[$rls_note-$key_offset])
                end if
                inc($x)
            end while
        end if

        call mod_dynamics()
        call rls_note_modifiers()
        note_off(%note_last_ID[$rls_note])
        $rls_event := play_note($rls_note,$rls_velocity,0,-1)
            change_vol     ($rls_event,   %note_vol   [$rls_note]  ,1)
            change_pan     ($rls_event,   %note_pan   [$rls_note]  ,1)
            change_tune    ($rls_event,   %note_tune  [$rls_note]  ,1)
            change_tune    ($rls_event,   %note_pitch [$rls_note]  ,1)
        {Increase release RR #}
        inc($cycle_mode_rls_rr)
        inc($cycle_mode_rls_rr_XFade)
    message("")
    end on

{#####################################################################################}
{ ---- END PLAYBACK - END PLAYBACK - END PLAYBACK - END PLAYBACK -  END PLAYBACK ---- }
{#####################################################################################}



{#####################################################################################}
{ --------------------------------- FUNCTIONS: UI ----------------------------------- }


    {#####################################################################################}
    { --------------------------------- FEATURE DISPLAY --------------------------------- }

        function UI_Pages
            $x := 0
            while ($x < $UI_Page_Limit+1)
                if ($x = $Page)
                set_control_par  (%UI_Page[$x], $CONTROL_PAR_VALUE, 1)
                else
                set_control_par  (%UI_Page[$x], $CONTROL_PAR_VALUE, 0)
                end if
            inc($x)
            end while

            $x := 1
            while ($x < $Total_UI)
                    set_control_par(%UI_Elements[$x],  $CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
                if (in_range($x,$Page_Item_Limit * $Page - $Page_Item_Limit,$Page_Item_Limit * $Page))

                    set_control_par(%UI_Elements[$x],  $CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
                    set_control_par(%hide_background[$x],$CONTROL_PAR_HIDE,$HIDE_PART_BG)
                    if ($advanced_view # 1)
                        set_control_par(%advanced_view[$x], $CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
                    end if
                end if
            inc($x)
            end while

            if ($Page = 1)
                if ($percussion_mode = 0)
                    set_control_par(get_ui_id($playing),    $CONTROL_PAR_HIDE,$HIDE_PART_BG)
                    set_control_par(get_ui_id(@PATCH_NAME), $CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
                else
                    set_control_par(get_ui_id($playing),    $CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
                    set_control_par(get_ui_id(@PATCH_NAME), $CONTROL_PAR_HIDE,$HIDE_PART_BG)
                end if
            else
                set_control_par(get_ui_id($technique_menu),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
            end if

            if ($STEPS # 0 and $Page = 2)
                set_control_par(get_ui_id(%StepTable),$CONTROL_PAR_HIDE,$HIDE_PART_BG)
            else
                set_control_par(get_ui_id(%StepTable),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
            end if

            if ($Page = 4)
                if ($percussion_mode = 0)
                    set_control_par(get_ui_id($xf_menu),           $CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
                    set_control_par(get_ui_id($rr_menu),           $CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
                    set_control_par(get_ui_id($rls_menu),          $CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
                    set_control_par(get_ui_id($slur_slow_menu),    $CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
                    set_control_par(get_ui_id($slur_moderate_menu),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
                    set_control_par(get_ui_id($slur_fast_menu),    $CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
                    if ($advanced_view = 1)
                        set_control_par(get_ui_id($slur_fast2_menu),   $CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
                        set_control_par(get_ui_id($stretch_mode),      $CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
                    else
                        set_control_par(get_ui_id($slur_fast2_menu),   $CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
                        set_control_par(get_ui_id($stretch_mode),      $CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
                    end if
                    set_menu_item_visibility (get_ui_id($rr_mode_menu), 0, 1)
                else
                    set_control_par(get_ui_id($xf_menu),           $CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
                    set_control_par(get_ui_id($rr_menu),           $CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
                    set_control_par(get_ui_id($rls_menu),          $CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
                    set_control_par(get_ui_id($slur_slow_menu),    $CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
                    set_control_par(get_ui_id($slur_moderate_menu),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
                    set_control_par(get_ui_id($slur_fast_menu),    $CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
                    set_control_par(get_ui_id($slur_fast2_menu),   $CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
                    set_control_par(get_ui_id($stretch_mode),      $CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
                    set_menu_item_visibility (get_ui_id($rr_mode_menu), 0, 0)
                end if
            end if
            message("")
    end function

    {#####################################################################################}

    function getenvelope
        select ($Waveform_menu)
            case 1
                if (%first_used_dyn_group[$technique_menu] > 0)
                    $x := %first_used_dyn_group[$technique_menu]
                end if
            case 2
                if (%technique_rr_groups[$technique_menu] > 0)
                    $x := %technique_rr1_group[$technique_menu]
                end if
            case 3
                if (%technique_rls_groups[$technique_menu] > 0)
                    $x := %technique_rls1_group[$technique_menu]
                end if
            case 4
                if (%technique_up_groups[$technique_menu] > 0)
                    $x := %technique_up1_group[$technique_menu]
                end if
                if (%technique_dn_groups[$technique_menu] > 0)
                    $x := %technique_dn1_group[$technique_menu]
                end if
        end select
        $C_env := get_engine_par($ENGINE_PAR_ATK_CURVE,$x, find_mod( $x, "TAB_ENVELOPE"),-1)
        $A_env := get_engine_par($ENGINE_PAR_ATTACK,$x, find_mod( $x, "TAB_ENVELOPE"),-1)
        $H_env := get_engine_par($ENGINE_PAR_HOLD,$x, find_mod( $x, "TAB_ENVELOPE"),-1)
        $D_env := get_engine_par($ENGINE_PAR_DECAY,$x, find_mod( $x, "TAB_ENVELOPE"),-1)
        $S_env := get_engine_par($ENGINE_PAR_SUSTAIN,$x, find_mod( $x, "TAB_ENVELOPE"),-1)
        $R_env := get_engine_par($ENGINE_PAR_RELEASE,$x, find_mod( $x, "TAB_ENVELOPE"),-1)
        message("")
    end function

    {#####################################################################################}

    function setenvelope
        select($Waveform_menu)
            case 1 {dynamics}
                $x := 1 
                while ($x < 7) {Dynamic_groups_code <-- don't remove this note, CTRL+F the term to see why}
                    {CAHDSR Envelope parameters have a Kontakt # (151-156)}
                    set_engine_par(150+$used_envelope, get_control_par(%ENV_Element[$used_envelope],$CONTROL_PAR_VALUE) ,%technique_ppp[$technique_menu], find_mod( %technique_pp[$technique_menu], "TAB_ENVELOPE"),0)
                    set_engine_par(150+$used_envelope, get_control_par(%ENV_Element[$used_envelope],$CONTROL_PAR_VALUE) ,%technique_pp [$technique_menu], find_mod( %technique_pp[$technique_menu], "TAB_ENVELOPE"),0)
                    set_engine_par(150+$used_envelope, get_control_par(%ENV_Element[$used_envelope],$CONTROL_PAR_VALUE) ,%technique_p  [$technique_menu], find_mod( %technique_p [$technique_menu], "TAB_ENVELOPE"),0)
                    set_engine_par(150+$used_envelope, get_control_par(%ENV_Element[$used_envelope],$CONTROL_PAR_VALUE) ,%technique_mp [$technique_menu], find_mod( %technique_mp[$technique_menu], "TAB_ENVELOPE"),0)
                    set_engine_par(150+$used_envelope, get_control_par(%ENV_Element[$used_envelope],$CONTROL_PAR_VALUE) ,%technique_mf [$technique_menu], find_mod( %technique_mf[$technique_menu], "TAB_ENVELOPE"),0)
                    set_engine_par(150+$used_envelope, get_control_par(%ENV_Element[$used_envelope],$CONTROL_PAR_VALUE) ,%technique_f  [$technique_menu], find_mod( %technique_f [$technique_menu], "TAB_ENVELOPE"),0)
                    set_engine_par(150+$used_envelope, get_control_par(%ENV_Element[$used_envelope],$CONTROL_PAR_VALUE) ,%technique_ff [$technique_menu], find_mod( %technique_ff[$technique_menu], "TAB_ENVELOPE"),0)
                    set_engine_par(150+$used_envelope, get_control_par(%ENV_Element[$used_envelope],$CONTROL_PAR_VALUE) ,%technique_fff[$technique_menu], find_mod( %technique_ff[$technique_menu], "TAB_ENVELOPE"),0)
                inc($x)
                end while
            case 2 {RR Attack}
                $x := %technique_rr1_group[$technique_menu]
                $y := $x + %technique_rr_groups[$technique_menu]
                while ($x < $y)
                    set_engine_par(150+$used_envelope, get_control_par(%ENV_Element[$used_envelope],$CONTROL_PAR_VALUE) ,$x, find_mod( $x, "TAB_ENVELOPE"),-1)
                    inc($x)
                end while
            case 3 {RLS Release}
                $x := %technique_rls1_group[$technique_menu]
                $y := $x + %technique_rls_groups[$technique_menu]
                while ($x < $y)
                    set_engine_par(150+$used_envelope, get_control_par(%ENV_Element[$used_envelope],$CONTROL_PAR_VALUE) ,$x, find_mod( $x, "TAB_ENVELOPE"),-1)
                    inc($x)
                end while
            case 4 {Slur / Legato}
                $x := %technique_up1_group[$technique_menu]
                $y := $x + %technique_up_groups[$technique_menu]
                while ($x < $y)
                    set_engine_par(150+$used_envelope, get_control_par(%ENV_Element[$used_envelope],$CONTROL_PAR_VALUE) ,$x, find_mod( $x, "TAB_ENVELOPE"),-1)
                    inc($x)
                end while
                $x := %technique_dn1_group[$technique_menu]
                $y := $x + %technique_dn_groups[$technique_menu]
                while ($x < $y)
                    set_engine_par(150+$used_envelope, get_control_par(%ENV_Element[$used_envelope],$CONTROL_PAR_VALUE) ,$x, find_mod( $x, "TAB_ENVELOPE"),-1)
                    inc($x)
                end while
        end select
        {IGNORE FIRST ENVELOPE MOD GROUP (to avoid accidently setting the envelope to zero if another mod group is renamed, removed, etc.)}
        $x := 0
        while ($x < $NUM_GROUPS)
            set_engine_par($ENGINE_PAR_MOD_TARGET_INTENSITY, 0, $x,find_mod( $x, "ENV_AHDSR"),-1)
            inc($x)
        end while
        message("")
    end function

    {#####################################################################################}

    function dynamicrange
        $x := 0 {This loop CAN be simpler, but this very wordy code means Kontakt only looks at groups that contain samples (it runs smoother)...}
        while ($x < $num_of_techniques + 1)

            $i := %dynamic_range[$x]

            $y := %first_used_dyn_group[$x]
            $z := %last_used_dyn_group[$x]
            while ($y < $z)
                set_engine_par($ENGINE_PAR_MOD_TARGET_INTENSITY,$i,$y,find_mod($y,"TAB_DYNRANGE_DECREASE"),-1)
                set_engine_par($ENGINE_PAR_MOD_TARGET_INTENSITY,($i/2)+($1M/2),$y,find_mod($y,"TAB_DYNRANGE_INCREASE"),-1)
                message("")
                wait(1)
                inc($y)
            end while
            message("")
            $y := %technique_rr1_group[$x]
            $z := $y + %rr_samples_found[$x] + 1
            while ($y < $z)
                set_engine_par($ENGINE_PAR_MOD_TARGET_INTENSITY,$i,$y,find_mod($y,"TAB_DYNRANGE_DECREASE"),-1)
                set_engine_par($ENGINE_PAR_MOD_TARGET_INTENSITY,($i/2)+($1M/2),$y,find_mod($y,"TAB_DYNRANGE_INCREASE"),-1)
                message("")
                wait(1)
                inc($y)
            end while
            $y := %technique_rls1_group[$x]
            $z := $y + %rls_samples_found[$x] + 1
            while ($y < $z)
                set_engine_par($ENGINE_PAR_MOD_TARGET_INTENSITY,$i,$y,find_mod($y,"TAB_DYNRANGE_DECREASE"),-1)
                set_engine_par($ENGINE_PAR_MOD_TARGET_INTENSITY,($i/2)+($1M/2),$y,find_mod($y,"TAB_DYNRANGE_INCREASE"),-1)
                message("")
                wait(1)
                inc($y)
            end while
            $y := %technique_up_groups[$x]
            $z := $y + %up_samples_found[$x] + 1
            while ($y < $z)
                set_engine_par($ENGINE_PAR_MOD_TARGET_INTENSITY,$i,$y,find_mod($y,"TAB_DYNRANGE_DECREASE"),-1)
                set_engine_par($ENGINE_PAR_MOD_TARGET_INTENSITY,($i/2)+($1M/2),$y,find_mod($y,"TAB_DYNRANGE_INCREASE"),-1)
                message("")
                wait(1)
                inc($y)
            end while
            $y := %technique_dn_groups[$x]
            $z := $y + %dn_samples_found[$x] + 1
            while ($y < $z)
                set_engine_par($ENGINE_PAR_MOD_TARGET_INTENSITY,$i,$y,find_mod($y,"TAB_DYNRANGE_DECREASE"),-1)
                set_engine_par($ENGINE_PAR_MOD_TARGET_INTENSITY,($i/2)+($1M/2),$y,find_mod($y,"TAB_DYNRANGE_INCREASE"),-1)
                message("")
                wait(1)
                inc($y)
            end while
            inc($x)
        end while

        {Update technique-specific dynamic range slider UI value (master reset or on persistence may miss this value)}
        $x := 1
        while ($x < $num_of_techniques + 1)
            if (%dynamic_range_unique[$x] # 1 and $x = $technique_menu)
                set_control_par(get_ui_id($tech_dyn_range),$CONTROL_PAR_VALUE,%dynamic_range[$x])
            end if
            inc($x)
        end while
        message("")
    end function

    {#####################################################################################}

    function resetmixer
        $x := 0
        while ($x < num_elements(%mix_saves) + 1)
            %mix_saves[$x] := $default_volume
            inc($x)
        end while
            $mic_num := 0
            while ($mic_num < $max_mics)
                set_engine_par($ENGINE_PAR_VOLUME,$default_volume,-1,-1,$NI_BUS_OFFSET+$mic_num)
                set_control_par(%MIC_Slider[$mic_num+1],$CONTROL_PAR_VALUE,$default_volume)
                inc($mic_num)
            end while
        message("")
    end function

    function load_mixer
        $mic_num := 0
        while ($mic_num < $max_mics)
            $mic_level := %mix_saves[($MIX * $max_mics) + $mic_num]
            set_control_par(%MIC_Slider[$mic_num+1],$CONTROL_PAR_VALUE,$mic_level)
            set_engine_par($ENGINE_PAR_VOLUME,$mic_level,-1,-1,$NI_BUS_OFFSET+$mic_num)
            inc($mic_num)
        end while
    end function

    {#####################################################################################}

    function save_mixer
        $mic_num := 0
        while ($mic_num < $max_mics)
            $mic_level := get_control_par(%MIC_Slider[$mic_num+1],$CONTROL_PAR_VALUE)
            %mix_saves[($MIX * $max_mics) + $mic_num] := $mic_level
            set_engine_par($ENGINE_PAR_VOLUME,$mic_level,-1,-1,$NI_BUS_OFFSET+$mic_num)
            inc($mic_num)
        end while
    end function

    {#####################################################################################}

    function mixerautomate
        if ($mic_num # -1 and $last_mic # -1)
            $mixes := ($MIX - $first_mix)*1 {*1 to reverse -1 so the loop can go up or down}
            $loop  := 0
            while ($mix_num # $MIX)
                $mic_num := $first_mic
                while ($mic_num < $last_mic)
                    $level_A := %mix_saves[($first_mix * $max_mics) + $mic_num]
                    $level_B := %mix_saves[($MIX * $max_mics) + $mic_num]
                    if ($level_A < $level_B)
                        $increment := $loop * (($level_B - $level_A) / $mixes)
                        %mix_saves[($mix_num * $max_mics) + $mic_num] := $level_A + $increment
                    end if
                    if ($level_A > $level_B)
                        $increment := $loop * (($level_A - $level_B) / $mixes)
                        %mix_saves[($mix_num * $max_mics) + $mic_num] := $level_A - $increment
                    end if
                    inc($mic_num)
                end while
                {Advance first loop}            
                if ($mix_num < $MIX)
                    inc($mix_num)
                end if
                if ($mix_num > $MIX)
                    dec($mix_num)
                end if
                inc($loop)
            end while
        end if
    end function

    {#####################################################################################}

    function mic_click_mode
        {Set whether CTRL, ALT, or SHIFT were used with the slider}
        $x := 0
        $y := 0
        $z := 0
        $x := get_control_par(%MIC_Slider[$mic_in_use],$CONTROL_PAR_KEY_CONTROL)
        $y := get_control_par(%MIC_Slider[$mic_in_use],$CONTROL_PAR_KEY_ALT)
        $z := get_control_par(%MIC_Slider[$mic_in_use],$CONTROL_PAR_KEY_SHIFT)

        if ($x = 1 or $y = 1 or $z = 1)
            inc($mics_click_count)
        end if

        if ($x = 1 and $z = 1)  {set all mics to default for current mix}
            $x := 0
            $z := 0
            $mic_num := 0
            while ($mic_num < $max_mics)
                %mix_saves[($MIX * $max_mics) + $mic_num] := $default_volume {Save to storage}
                set_control_par(%MIC_Slider[$mic_num+1],$CONTROL_PAR_VALUE,$default_volume) {set UI}
                set_engine_par($ENGINE_PAR_VOLUME,$default_volume,-1,-1,$NI_BUS_OFFSET+$mic_num) {Set Kontakt bus level}
                inc($mic_num)
                wait(1)            
            end while
        end if

        if ($x = 1) {store CTRL to set mic to default in mixer function}
            $x := 0
            $mic_num := $mic_in_use - 1
            set_control_par(%MIC_Slider[$mic_in_use],$CONTROL_PAR_VALUE,$default_volume) {set UI}
        end if

        if ($y = 1) {store values and trigger mixer automation}
            $y := 0
            if ($mics_click_count = 2) {1st click release}
                $mix_num   := $MIX
                $first_mix := $MIX
                $first_mic := $mic_in_use - 1
            end if
            if ($mics_click_count > 3) {2nd click release}
                $last_mic := $mic_in_use
                $mics_click_count := 0
                call mixerautomate()
                $mic_num   := -1
                $first_mic := -1
                $first_mix := $MIX
                $mix_num   := -1
            end if
        end if
    end function

    {#####################################################################################}

    function draw_crossfade
        $x := 0
        while ($x < 129)
            %XF_1[$x]        := 0
            %XF_2[$x]        := 0
            %XF_3[$x]        := 0
            %XF_4[$x]        := 0
            %XF_5[$x]        := 0
            %XF_6[$x]        := 0
            %XF_7[$x]        := 0
            %XF_8[$x]        := 0
            inc($x)
        end while

        {XFADE SIZES}
        ~shape     := int_to_real($xfade_curve/24)
        $curve_end := (256/($current_dynamic_number-1))
        ~middle    := int_to_real($curve_end)/1.98
        $middle    := ($curve_end/2)+1

        {SAVE XFADES}
        $x := 0
        while ($x < 256)

            {Calculate Curve}
            ~loop := int_to_real($x)
            ~y := sin( ~NI_MATH_PI * 2.0 * (int_to_real($x)/4.0) / ~middle)
            ~y := pow( ~y, ~shape / 12.0)
            ~z := ~y * 127.0

            {Store Curve}
            if (in_range($x, $middle-$middle, $curve_end))
                %XF_1[$x-($middle*1)+1] := real_to_int(round(1.0 * ~z))
                %XF_2[$x-1]             := real_to_int(round(1.0 * ~z))
                %XF_3[$x+($middle*1)-1] := real_to_int(round(1.0 * ~z))
                %XF_4[$x+($middle*2)-3] := real_to_int(round(1.0 * ~z))
                %XF_5[$x+($middle*3)-2] := real_to_int(round(1.0 * ~z))
                %XF_6[$x+($middle*4)-2] := real_to_int(round(1.0 * ~z))
                %XF_7[$x+($middle*5)-4] := real_to_int(round(1.0 * ~z))
                %XF_8[$x+($middle*6)-5] := real_to_int(round(1.0 * ~z))
            else
                %XF_1[$x-($middle*1)+1] := 0 {+/- corrects/offsets '$middle'}
                %XF_2[$x-1]             := 0
                %XF_3[$x+($middle*1)-1] := 0
                %XF_4[$x+($middle*2)-3] := 0
                %XF_5[$x+($middle*3)-2] := 0
                %XF_6[$x+($middle*4)-2] := 0
                %XF_7[$x+($middle*5)-4] := 0
                %XF_8[$x+($middle*6)-5] := 0
            end if

            inc($x)
        end while
        message("")
    end function

    {#####################################################################################}

    function binary_crossfade
        $x := 0
        while ($x < 129)
            %XF_binary[$x] := 0
            inc($x)
        end while

        {XFADE SIZES}
        ~shape     := int_to_real($xfade_curve/24)
        $curve_end := 256
        ~middle    := int_to_real($curve_end)/1.98
        $middle    := ($curve_end/2)+1

        {SAVE XFADES}
        $x := 0
        while ($x < 256)

            {Calculate Curve}
            ~loop := int_to_real($x)
            ~y := sin( ~NI_MATH_PI * 2.0 * (int_to_real($x)/4.0) / ~middle)
            ~y := pow( ~y, ~shape / 12.0)
            ~z := ~y * 127.0

            {Store Curve}
            if (in_range($x, $middle-$middle, $curve_end))
                %XF_binary[$x-($middle*1)+1] := real_to_int(round(1.0 * ~z))
            else
                %XF_binary[$x-($middle*1)+1] := 0 {+/- corrects/offsets '$middle'}
            end if
            inc($x)
        end while
        if ($xfade_curve > 155)
            %XF_binary[127] := 0
        end if
        message("")
    end function

{#####################################################################################}
{ --- UI CONTROL - UI CONTROL - UI CONTROL - UI CONTROL - UI CONTROL - UI CONTROL --- }
{#####################################################################################}

    on ui_control($Page_Main)
        call draw_mode_autosaver() {see note on $draw_mode ui_control callback}
        {CTRL + ALT + SHIFT}
        if (get_control_par(get_ui_id($Page_Main),$CONTROL_PAR_KEY_CONTROL) = 1 and get_control_par(get_ui_id($Page_Main),$CONTROL_PAR_KEY_ALT) = 1 and get_control_par(get_ui_id($Page_Main),$CONTROL_PAR_KEY_SHIFT) = 1)
            call resetmixer()
        end if
        {ALT}
        if (get_control_par(get_ui_id($Page_Main),$CONTROL_PAR_KEY_CONTROL) = 0 and get_control_par(get_ui_id($Page_Main),$CONTROL_PAR_KEY_ALT) = 1 and get_control_par(get_ui_id($Page_Main),$CONTROL_PAR_KEY_SHIFT) = 0)
            $advanced_view := -1 * $advanced_view
        end if
        $Page := 1
        call UI_Pages()
    end on
    on ui_control($Page_Play)
        $Page := 2
        call UI_Pages()
        if (get_control_par(get_ui_id($Page_Play),$CONTROL_PAR_KEY_ALT) = 1)
            $step_mic_rr_only := -1 * $step_mic_rr_only
        end if
    end on
    on ui_control($Page_Waveform)
        $Page := 3
        call draw_mode_autosaver() {see note on $draw_mode ui_control callback}
        call UI_Pages()
        call getenvelope()
    end on
    on ui_control($Page_Behavior)
        call draw_mode_autosaver() {see note on $draw_mode ui_control callback}
        {CTRL+ALT+SHIFT = Show all techniques in menus to build with an empty instrument shell}
        if (get_control_par(get_ui_id($Page_Behavior),$CONTROL_PAR_KEY_CONTROL) = 1 and get_control_par(get_ui_id($Page_Behavior),$CONTROL_PAR_KEY_ALT) = 1 and get_control_par(get_ui_id($Page_Behavior),$CONTROL_PAR_KEY_SHIFT) = 1)
            $menu_mode := -1 * $menu_mode
            call findsamples()
        end if
        {Normal page behavior}
        call refresh_tech_settings()
        $Page := 4
        call UI_Pages()
        if (get_control_par(get_ui_id($Page_Behavior),$CONTROL_PAR_KEY_ALT) = 1)
            $rls_rr_matches_attack := -1 * $rls_rr_matches_attack
        end if
    end on

{#####################################################################################}
{ ----------------------------------- PAGE: MAIN ------------------------------------ }

    on ui_control ($main_volume)
        if (get_control_par(get_ui_id($main_volume),$CONTROL_PAR_KEY_CONTROL) = 1) {If CTRL while clicked, reset to default value, otherwise use slider value}
            set_engine_par($ENGINE_PAR_VOLUME,$default_volume,-1,-1,-1)
            set_control_par(get_ui_id($main_volume),$CONTROL_PAR_VALUE,$default_volume)
        else
            set_engine_par($ENGINE_PAR_VOLUME,$main_volume,-1,-1,-1)
        end if
    end on

    on ui_control ($width)
        if (get_control_par(get_ui_id($width),$CONTROL_PAR_KEY_CONTROL) = 1)
            set_engine_par($ENGINE_PAR_STEREO,$1M,-1,-1,-1)
            set_control_par(get_ui_id($width),$CONTROL_PAR_VALUE,$1M)
        else
            set_engine_par($ENGINE_PAR_STEREO,$width,-1,-1,-1)
        end if
    end on

    on ui_control ($humanize)
        if (get_control_par(get_ui_id($humanize),$CONTROL_PAR_KEY_CONTROL) = 1)
            set_control_par(get_ui_id($humanize),$CONTROL_PAR_VALUE,$humanize_range * $humanize_range)
        end if
        if (get_control_par(get_ui_id($humanize),$CONTROL_PAR_KEY_SHIFT) = 1)
            $bias := $humanize
        end if
    end on

    on ui_control ($dynamic_range)
        {if CTRL + Click ... Restore all techniques to this master dynamic range slider}
        if (get_control_par(get_ui_id($dynamic_range),$CONTROL_PAR_KEY_CONTROL) = 1)
            $x := 1
            while ($x < $num_of_techniques + 1)
                %dynamic_range_unique[$x] := 0
                %dynamic_range[$x] := $dynamic_range
                inc($x)
            end while
        end if

        {Store slider value}
        {So any callback can get/set 1 or all technique dyn ranges (on persistence)
        ...to avoid inconsistent dyn ranges if edited while building a new instrument, adding RR's, etc.}
        $x := 1
        while ($x < $num_of_techniques + 1)
            if (%dynamic_range_unique[$x] # 1)
                %dynamic_range[$x] := $dynamic_range
            end if
            inc($x)
        end while

        {APPLY DYNAMIC RANGE TO MODULATORS WITH DYN_RANGE T A B NAME IN THE INSTRUMENT WRENCH VIEW}
        call dynamicrange()
    end on

    on ui_control($Theme)
        set_skin_offset(($Theme*347)-347)
    end on
    on ui_control($KeyRangeTech)
        call find_key_range()
    end on

    on ui_control ($MIX)
        call load_mixer
    end on

    on ui_control ($Mic_Bus1)
        $mic_in_use := 1
        call mic_click_mode()
        call save_mixer()
    end on

    on ui_control ($Mic_Bus2)
        $mic_in_use := 2
        call mic_click_mode()
        call save_mixer()
    end on

    on ui_control ($Mic_Bus3)
        $mic_in_use := 3
        call mic_click_mode()
        call save_mixer()
    end on

    on ui_control ($Mic_Bus4)
        $mic_in_use := 4
        call mic_click_mode()
        call save_mixer()
    end on

    on ui_control ($Mic_Bus5)
        $mic_in_use := 5
        call mic_click_mode()
        call save_mixer()
    end on

    on ui_control ($Mic_Bus6)
        $mic_in_use := 6
        call mic_click_mode()
        call save_mixer()
    end on

    on ui_control ($Mic_Bus7)
        $mic_in_use := 7
        call mic_click_mode()
        call save_mixer()
    end on

    on ui_control ($Mic_Bus8)
        $mic_in_use := 8
        call mic_click_mode()
        call save_mixer()
    end on

    on ui_control ($Mic_Bus9)
        $mic_in_use := 9
        call mic_click_mode()
        call save_mixer()
    end on

    on ui_control ($Mic_Bus10)
        $mic_in_use := 10
        call mic_click_mode()
        call save_mixer()
    end on

    on ui_control ($Mic_Bus11)
        $mic_in_use := 11
        call mic_click_mode()
        call save_mixer()
    end on

    on ui_control ($Mic_Bus12)
        $mic_in_use := 12
        call mic_click_mode()
        call save_mixer()
    end on

    on ui_control ($Mic_Bus13)
        $mic_in_use := 13
        call mic_click_mode()
        call save_mixer()
    end on

    on ui_control ($Mic_Bus14)
        $mic_in_use := 14
        call mic_click_mode()
        call save_mixer()
    end on

    on ui_control ($Mic_Bus15)
        $mic_in_use := 15
        call mic_click_mode()
        call save_mixer()
    end on

    on ui_control ($Mic_Bus16)
        $mic_in_use := 16
        call mic_click_mode()
        call save_mixer()
    end on

{#####################################################################################}
{ ----------------------------------- PAGE: PLAY ------------------------------------ }

    on ui_control ($play_menu)
        call draw_mode_autosaver() {see note on $draw_mode ui_control callback}
        call load_steps
    end on

    on ui_control ($play_slider)
        $x := 0
        $y := 0
        $z := 0
        $x := get_control_par(get_ui_id($play_slider),$CONTROL_PAR_KEY_CONTROL)
        $y := get_control_par(get_ui_id($play_slider),$CONTROL_PAR_KEY_ALT)
        $z := get_control_par(get_ui_id($play_slider),$CONTROL_PAR_KEY_SHIFT)

        if ($STEPS > 0)
            if ($draw_mode = 0)

                {CTRL for default values}
                if ($x = 1 and $y = 0)
                    {Default values are set on play_menu ui_control callback}
                end if
                {Set StepTable}
                $x := 0
                $y := $max_steps
                while ($x < $y)
                    %stepstorage[($play_menu * $max_steps) + $x] := $play_slider
                    %StepTable[$x] := $play_slider
                    inc($x)
                end while
                call save_steps()

            else {If ($draw_mode = 1)}

                {DEFAULT - dynamic center}
                if ($x = 0 and $y = 0)
                    $x := 0
                    while ($x < $max_steps)
                        $y := %stepstorage[($play_menu * $max_steps) + $x]/$10K
                        %StepTable[$x] := ((($y*($play_slider/$10K))/50)*$10K)+((50-($play_slider/$10K))*$10K)
                        inc($x)
                    end while
                    $x := 0
                    $y := 0
                end if

                {CTRL - static move}
                if ($x = 1 and $y = 0)
                    $i := %StepTable[0]
                    $x := 0
                    while ($x < $max_steps)
                        $y := $play_slider-$i
                        %StepTable[$x] := %StepTable[$x] + $y
                        inc($x)
                    end while
                    $x := 0
                    $y := 0
                end if

                {ALT - dynamic bottom}
                if ($x = 0 and $y = 1)
                    $x := 0
                    while ($x < $max_steps)
                        $y := %stepstorage[($play_menu * $max_steps) + $x]/$10K
                        %StepTable[$x] := (($y*$play_slider)/100)
                        inc($x)
                    end while
                    $x := 0
                    $y := 0
                end if
                message("")
            end if
        end if
        if ($STEPS = 0)
            %play_menu_value[$play_menu] := $play_slider {calc is done in "play_modifier" playback function}
        end if
    end on

    on ui_control($draw_mode)
        {Kontakt 6 allows simpler saving, but if saving is simplified, DRAW button should still remain as an inverse/retrograde feature}
        {Kontakt 5 (current code) explanation:
            Slider click counts in K5 means that draw_mode toggles an editor, but changes only save once de-toggled again.
            To avoid hearing and seeing different steps, save playback is updated upon playing a note. It's better UX, at a cost...   
            If you enable draw & edit steps, they'll only save (persistence) if you de-toggle draw_mode OR PLAY A NOTE.}
        if (get_control_par(get_ui_id($draw_mode),$CONTROL_PAR_KEY_CONTROL) = 1) {Inverse & Retrograde}
            call inversesteps()
            call retrosteps()
            $draw_mode := 0
        end if
        if (get_control_par(get_ui_id($draw_mode),$CONTROL_PAR_KEY_ALT) = 1) {Inverse}
            call inversesteps()
            $draw_mode := 0
        end if
        if (get_control_par(get_ui_id($draw_mode),$CONTROL_PAR_KEY_SHIFT) = 1) {Retrograde}
            call retrosteps()
            $draw_mode := 0
        end if
        call save_steps()
    end on

    on ui_control (%StepTable)
        $x := 0
        $y := $max_steps
        while ($x < $y)
            %stepstorage[($play_menu * $max_steps) + $x]  :=  %StepTable[$x]
            inc($x)
        end while
        if (get_control_par(get_ui_id(%StepTable),$CONTROL_PAR_KEY_SHIFT) = 0)
            select ($play_menu)
                case 3 {pan}
                    if (in_range(%StepTable[$NI_CONTROL_PAR_IDX],($1M/2)-$snap,($1M/2)+$snap))
                        %StepTable[$NI_CONTROL_PAR_IDX] := $1M/2
                    end if
                case 4 {tune}
                    if (in_range(%StepTable[$NI_CONTROL_PAR_IDX],($1M/2)-$snap,($1M/2)+$snap))
                        %StepTable[$NI_CONTROL_PAR_IDX] := $1M/2
                    end if
                case 5 {pitch}
                    $x := 0
                    while ($x < $scale_degrees + 1) {23 pitches to snap, 11 above, below, and center, no need for octave}
                        if (in_range(%StepTable[$NI_CONTROL_PAR_IDX],($x*$scale_interval)-($scale_interval/2),($x*$scale_interval)+($scale_interval/2)))
                            %StepTable[$NI_CONTROL_PAR_IDX] := $x*$scale_interval
                        end if
                        inc($x)
                    end while
                case 7 {stretch}
                    if (in_range(%StepTable[$NI_CONTROL_PAR_IDX],($1M/2)-$snap,($1M/2)+$snap))
                        %StepTable[$NI_CONTROL_PAR_IDX] := $1M/2
                    end if
            end select
        end if
    end on

    on ui_control ($play_preset_menu)
        call draw_mode_autosaver() {see note on $draw_mode ui_control callback}
        $x := 0
        $y := $max_steps
        while ($x < $y)
            %StepTable[$x]  :=  %steppresets[($play_preset_menu * $max_steps) + $x]
            %stepstorage[($play_menu * $max_steps) + $x]  :=  %steppresets[($play_preset_menu * $max_steps) + $x]
            inc($x)
        end while
    end on

    on ui_control ($save_preset)
        call draw_mode_autosaver() {see note on $draw_mode ui_control callback}
        $x := 0
        $y := $max_steps
        while ($x < $y)
            %steppresets[($play_preset_menu * $max_steps) + $x] := %StepTable[$x]
            inc($x)
        end while
        if (get_control_par(get_ui_id($save_preset),$CONTROL_PAR_KEY_CONTROL) = 1 and get_control_par(get_ui_id($save_preset),$CONTROL_PAR_KEY_ALT) = 0)
            save_array(%steppresets,0)
        end if
        if (get_control_par(get_ui_id($save_preset),$CONTROL_PAR_KEY_CONTROL) = 0 and get_control_par(get_ui_id($save_preset),$CONTROL_PAR_KEY_ALT) = 1)
            load_array(%steppresets,0)
        end if
        $save_preset := 0
    end on

    on ui_control ($STEPS)
        call draw_mode_autosaver() {see note on $draw_mode ui_control callback}
        call step_number_changes()
    end on

    on ui_control($technique_menu)
        $last_technique := $active_technique
        $active_technique := $technique_menu
        call draw_mode_autosaver() {see note on $draw_mode ui_control callback}
        call UI_Pages()
        call refresh_tech_settings()
        call getenvelope()
        call draw_crossfade()
    end on

{#####################################################################################}
{ ---------------------------------- PAGE: BEHAVIOR --------------------------------- }

    function apply_xf_menu
        $Waveform_menu := 1
        {APPLY SELECTION TO INSTRUMENT AND SAVE}
        call refresh_tech_settings()
        if (%use_tech_xfade[$active_technique] # $active_technique)
            set_controller($CC_xfade,64)
        else
            set_controller($CC_xfade,0) {If disabled, set to 0 so active_technique is still heard and because CC is now ignored}
        end if
        {Dynamics}
        call crossfade_translator()
        if ($percussion_mode = 0) {a precaution if this UI function is changed later}
            {Tech to Tech x-fade}
            call binary_translator()
        end if
    end function

    on ui_control($xf_menu)
        {SET VALUE AND DISPLAYED MENU ITEM}
        if ($xf_menu = $technique_menu)
            %use_tech_xfade [$technique_menu] := $technique_menu
            $xf_menu := 0
        else
            %use_tech_xfade [$technique_menu] := $xf_menu
        end if        
        call apply_xf_menu()
    end on
    on ui_control($rr_menu)
        if ($rr_menu = $technique_menu)
            %use_rr [$technique_menu] := $technique_menu
            $rr_menu := 0
        else
            %use_rr [$technique_menu] := $rr_menu
        end if
        $Waveform_menu := 2
    end on
    on ui_control($rls_menu)
        if ($rls_menu = $technique_menu)
            %use_rls [$technique_menu] := $technique_menu
            $rls_menu := 0
        else
            %use_rls [$technique_menu] := $rls_menu
        end if
        $Waveform_menu := 3
    end on
    on ui_control($slur_slow_menu)
        if ($slur_slow_menu = $technique_menu)
            %slur_slow [$technique_menu] := $technique_menu
            $slur_slow_menu := 0
        else
            %slur_slow [$technique_menu] := $slur_slow_menu
        end if
        $Waveform_menu := 4
    end on
    on ui_control($slur_moderate_menu)
        if ($slur_moderate_menu = $technique_menu)
            %slur_moderate [$technique_menu] := $technique_menu
            $slur_moderate_menu := 0
        else
            %slur_moderate [$technique_menu] := $slur_moderate_menu
        end if
        $Waveform_menu := 4
    end on
    on ui_control($slur_fast_menu)
        if ($slur_fast_menu = $technique_menu)
            %slur_fast [$technique_menu] := $technique_menu
            $slur_fast_menu := 0
        else
            %slur_fast [$technique_menu] := $slur_fast_menu
        end if
        $Waveform_menu := 4
    end on
    on ui_control($slur_fast2_menu)
        if ($slur_slow_menu = $technique_menu)
            %slur_fast2 [$technique_menu] := $technique_menu
            $slur_fast2_menu := 0
        else
            %slur_fast2 [$technique_menu] := $slur_fast2_menu
        end if
        $Waveform_menu := 4
    end on

    { ------- }

    on ui_control ($tech_dyn_range)
        %dynamic_range_unique[$technique_menu] := 1
        %dynamic_range[$technique_menu] := $tech_dyn_range
        call dynamicrange()
    end on

    { ------- }

    on ui_control($rr_mode_menu)
        if ($rr_mode_menu = 2 and %technique_rr_groups[$technique_menu] > 34)
            $rr_mode_menu := 1
        end if
        if ($rr_mode_menu = 1 and $percussion_mode = 1)
            $rr_mode_menu := 2
        end if
        %rr_mode[$technique_menu] := $rr_mode_menu
        $cycle_mode_rr := 1
    end on

    on ui_control($ModVel_mode)
        %copy_cc1_mode[$technique_menu] := $ModVel_mode
    end on

    on ui_control($uses_filters)
        {Save to techniques}
        %tech_uses_filters[$technique_menu] := $uses_filters
        {Activate/Bypass Filter FX}
        $mic_num := 1
        while ($mic_num < $num_of_mics + 1)
            $group_mic := %mic[$mic_num]
            $group_tech := %technique[$technique_menu]
            while ($group_tech < %technique[$technique_menu + 1])
                set_engine_par($ENGINE_PAR_EFFECT_BYPASS, $uses_filters, $group_mic + $group_tech, $HP_filter_slot, $filter_generic)
                set_engine_par($ENGINE_PAR_EFFECT_BYPASS, $uses_filters, $group_mic + $group_tech, $LP_filter_slot, $filter_generic)
                inc($group_tech)
            end while
            inc($mic_num)
        end while
    end on

    on ui_control ($percussion_mode)
        {MASS DISABLE - XF & Human RR}
        if ($percussion_mode = 1)
            call binary_translator
            {Storage}
            $x := 1
            while ($x < $num_of_techniques + 1)
                if (%rr_mode[$x] = 1)
                    %rr_mode[$x] := 2
                end if
                %use_tech_xfade[$x] := 0
                inc($x)
            end while

            {Menus}
            $xf_menu := 0
            if ($rr_mode_menu = 1)
                $rr_mode_menu := 2
            end if
        end if

        {RESET RR # REGARDLESS OF ANY SELECTED MODE}
        $card           := 1
        $android_clock  := 1
        $cycle_mode_rr  := 1
        $x := 0
        while ($x < 129)
            %perc_android_clock [$x] := 1
            %perc_cycle_mode_rr [$x] := 1
        inc($x)
        end while

        call apply_xf_menu()
        call UI_Pages()
    end on

{#####################################################################################}
{ ---------------------------------- PAGE: WAVEFORM --------------------------------- }

    on ui_control ($Waveform_menu)
        call getenvelope()
    end on

    on ui_control ($xfade_curve)
        {Dynamics}
        call draw_crossfade()
        call crossfade_translator()
        {Tech to Tech x-fade}
        call binary_crossfade()
        if ($percussion_mode = 0) {To avoid heavy load and it's not necessary until then anyway}
            call binary_translator()
        end if
    end on

    on ui_control ($C_env)
        $used_envelope := 1
        call setenvelope()
    end on

    on ui_control ($A_env)
        $used_envelope := 2
        call setenvelope()
    end on

    on ui_control ($H_env)
        $used_envelope := 3
        call setenvelope()
    end on

    on ui_control ($D_env)
        $used_envelope := 4
        call setenvelope()
    end on

    on ui_control ($S_env)
        $used_envelope := 5
        call setenvelope()
    end on

    on ui_control ($R_env)
        $used_envelope := 6
        call setenvelope()
    end on

{#####################################################################################}
{ --  CC  -  CONTINUOUS CONTROLLER  -  MIDI CC DATA  -  CONTINUOUS CONTROLLER  CC  -- }
{#####################################################################################}

    on controller

        if ($CC_NUM = 1 and %CC_TOUCHED[1] = 1)
            $CC1_value := %CC[1]+1
            call crossfade_translator()
        end if

        if ($CC_NUM = $CC_technique and %CC_TOUCHED[$CC_technique] = 1)
            $last_technique := $active_technique
            $active_technique := %CC[$CC_technique]
            $technique_menu := $active_technique
            call UI_Pages()
            call refresh_tech_settings()
            call getenvelope()
            call draw_crossfade()
            if ($active_technique = 0)
                $active_technique := 1
                $last_technique := $active_technique
            end if
        end if
         
        if ($CC_NUM = $CC_dyn_range and %CC_TOUCHED[$CC_dyn_range] = 1)
            if (%dynamic_range_unique[$active_technique] # 1)
                %dynamic_range[$active_technique] := %CC[$CC_dyn_range] * 7814 {i.e. ($1M / 127) }
            end if
            call dynamicrange()
        end if

        if ($CC_NUM = $CC_xfade and %CC_TOUCHED[$CC_xfade] = 1)
            {X-FADE}
            {if (%use_tech_xfade[$active_technique] = 0 or %use_tech_xfade[$active_technique] = $active_technique)
                $last_xfade_cc_value := %CC[$CC_xfade]
                ignore_controller
                set_controller($CC_xfade,0)
            end if}
            $last_xfade_cc_value := %CC[$CC_xfade]
            ignore_controller
            if ($percussion_mode = 0)
                call binary_translator()
            end if
        end if

        if ($CC_NUM = $CC_fast_legato and %CC_TOUCHED[$CC_fast_legato] = 1)
            {fast legato 2 XF}
            $last_fastslur_cc_value := %CC[$CC_fast_legato]
            ignore_controller
            {call translator for fast legato xfade}
        end if

        if ($CC_NUM = $CC_mix and %CC_TOUCHED[$CC_mix] = 1 and in_range(%CC[$CC_mix],1,$Max_Mixes))
            set_control_par(get_ui_id($MIX),$CONTROL_PAR_VALUE, %CC[$CC_mix])
            $MIX := %CC[$CC_mix]
            ignore_controller
        end if

        if ($CC_NUM = $CC_steps and %CC_TOUCHED[$CC_steps] = 1 and in_range(%CC[$CC_steps],0,$max_steps))
            $STEPS := %CC[$CC_steps]
            call step_number_changes()
            ignore_controller
        end if

    end on

{#####################################################################################}
{ -------------------  PERSISTENCE - SNAPSHOT LOADED - POST-INIT  ------------------- }
{#####################################################################################}

    on persistence_changed
        $technique_menu := $active_technique
        call UI_Pages()
        call load_steps()
        call load_mixer()
        call step_number_changes()
        call findsamples()
        call refresh_tech_settings()
        call getenvelope()
        call draw_crossfade()
        call binary_crossfade()
        if ($percussion_mode = 0)
            call binary_translator()
        end if
        call crossfade_translator()

        $i := 0
        while ($i < $NUM_GROUPS+1)
            purge_group($i,1)
            inc($i)
        end while

        {UPDATE DYNAMIC RANGE}
        {to avoid inconsistent dyn ranges if edited while building a new instrument, adding RR's, etc.}
            call dynamicrange()
            call find_key_range()
    end on
